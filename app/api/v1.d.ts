/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/auth/check': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Check if you are authenticated */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              userID: components['schemas']['UserID'];
            };
          };
        };
        default: components['responses']['DefaultErrorResponse'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/authenticate': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Authenticate as a user (see /auth/authenticate-browser if you are the frontend) */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['AuthenticateReq'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['AuthenticateOK'];
          };
        };
        default: components['responses']['DefaultErrorResponse'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/authenticate-browser': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Authenticate and store the token in the requesting browser's cookie jar
     * @description This sets a cookie authenticating you as the given user. The cookie will only work on plantopo.com
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['AuthenticateReq'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            'Set-Cookie'?: components['schemas']['SetSessionCookieHeader'];
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['AuthenticateBrowserOK'];
          };
        };
        default: components['responses']['DefaultErrorResponse'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/revoke': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Revoke a token */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['AuthRevokeReq'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        default: components['responses']['DefaultErrorResponse'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/revoke-browser': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Revoke the token stored in the requesting browser's cookie jar
     * @description Revokes the cookie set by /auth/authenticate-browser
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            'Set-Cookie'?: string;
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        default: components['responses']['DefaultErrorResponse'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/register': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Register a new account */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['AuthRegisterRequest'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['AuthenticateOK'];
          };
        };
        default: components['responses']['DefaultErrorResponse'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/register-browser': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Register a new account and store the token in the requesting browser's cookie jar */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['AuthRegisterRequest'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            'Set-Cookie'?: components['schemas']['SetSessionCookieHeader'];
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['AuthenticateBrowserOK'];
          };
        };
        default: components['responses']['DefaultErrorResponse'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/elevation': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Lookup elevations for a list of coordinates */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['ElevationPostReq'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ElevationPostOK'];
          };
        };
        default: components['responses']['DefaultErrorResponse'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/weather/short-uk': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Find short format weather forecasts for a place in the UK */
    get: {
      parameters: {
        query: {
          /**
           * @description A place to search for
           * @example ben nevis
           */
          query: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
          };
        };
        default: components['responses']['DefaultErrorResponse'];
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/munro-access/request': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Request a report be generated */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            /** @example Edinburgh Waverley Railway Station (EDB) */
            fromLabel: string;
            fromPoint: components['schemas']['Point'];
            /** Format: date-time */
            date: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              status: components['schemas']['MunroAccessReportStatus'];
            };
          };
        };
        default: components['responses']['DefaultErrorResponse'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/munro-access/report/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a report */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Redirect */
        307: {
          headers: {
            Location?: string;
            [name: string]: unknown;
          };
          content?: never;
        };
        default: components['responses']['DefaultErrorResponse'];
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/munro-access/report/{id}/status': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get report generation status
     * @description To subscribe to status updates use `new EventSource('/munro-access/report/{id}/status-updates')`
     *
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['MunroAccessReportStatus'];
          };
        };
        default: components['responses']['DefaultErrorResponse'];
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/munro-access/pregenerated-reports': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get pregenerated reports for common locations */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              reports: components['schemas']['MunroAccessReportMeta'][];
            };
          };
        };
        default: components['responses']['DefaultErrorResponse'];
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/munro-access/munros': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List munros */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              munros: {
                /** @enum {string} */
                type: 'FeatureCollection';
                features: {
                  /** @enum {string} */
                  type: 'Feature';
                  /** @example 1 */
                  id: number;
                  properties: {
                    /** @example Ben Chonzie */
                    name: string;
                    /** @example 930.4 */
                    meters: number;
                    photo?: {
                      /** @example https://... */
                      source: string;
                      /** @example 800 */
                      width: number;
                      /** @example 600 */
                      height: number;
                      /** @example Angus */
                      author?: string;
                      /** @example geograph.org.uk */
                      sourceText?: string;
                      /** @example https://www.geograph.org.uk */
                      sourceLink?: string;
                    };
                  };
                  geometry: {
                    /** @enum {string} */
                    type: 'Point';
                    /** @example [
                     *       -3.992057,
                     *       56.453851
                     *     ] */
                    coordinates: number[];
                  };
                }[];
              };
            };
          };
        };
        default: components['responses']['DefaultErrorResponse'];
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    AuthRegisterRequest: {
      /** @example John Doe */
      name: string;
      /** @example john.doe@example.com */
      email: string;
      /** @example password */
      password: string;
    };
    /** @example {
     *       "message": "internal server error (correlation id cor_e0a3b2628acbb22dad4696acaf30be88)"
     *     } */
    DefaultError: {
      message: string;
      retryAfterSeconds?: number;
      validationErrors?: components['schemas']['ValidationErrors'];
    };
    ValidationErrors: {
      generalErrors?: string[];
      fieldErrors?: {
        [key: string]: string;
      };
    };
    AuthenticateReq: {
      /** @example user@example.com */
      email: string;
      /** @example password */
      password: string;
    };
    AuthenticateOK: {
      token: components['schemas']['Token'];
      user: components['schemas']['User'];
    };
    AuthenticateBrowserOK: {
      user: components['schemas']['User'];
    };
    AuthRevokeReq: {
      token: components['schemas']['Token'];
    };
    User: {
      id: components['schemas']['UserID'];
      /** @example John Doe */
      name?: string;
      /** @example john.doe@example.com */
      email: string;
      /** @example true */
      emailConfirmed?: boolean;
    };
    /** @example u_248h248h248h248h248h248h24 */
    UserID: string;
    /** @example plantoposecret_db480e5c2aa6f443ff721116b352e88c396351fd20eee0c95ed272cba311edd6890f6759931d2cdca4acb16d90a8d2af0ee9af83b35446fda1c8e272fa378462 */
    Token: string;
    /** @example session=plantoposecret_db480e5c2aa6f443ff721116b352e88c396351fd20eee0c95ed272cba311edd6890f6759931d2cdca4acb16d90a8d2af0ee9af83b35446fda1c8e272fa378462; ... */
    SetSessionCookieHeader: string;
    /** @example {
     *       "coordinates": [
     *         [
     *           -105.883643,
     *           40.176097
     *         ],
     *         [
     *           -105.861114,
     *           40.150743
     *         ],
     *         [
     *           -105.822319,
     *           40.14182
     *         ]
     *       ]
     *     } */
    ElevationPostReq: {
      coordinates: number[][];
    };
    /** @example {
     *       "elevation": [
     *         2518,
     *         2518,
     *         2518
     *       ]
     *     } */
    ElevationPostOK: {
      elevation: number[];
    };
    /**
     * @description longitude, latitude
     * @example [
     *       -3.36459,
     *       55.94839
     *     ]
     */
    Point: number[];
    MunroAccessReportStatus: {
      /** @example 1724364326040-0 */
      id: string;
      /** Format: date-time */
      timestamp: string;
      /** @enum {string} */
      status: 'received' | 'working' | 'ready';
      report: components['schemas']['MunroAccessReportMeta'];
    };
    MunroAccessReportMeta: {
      /** @example mar_2gnkznnp7j5ef54jfqgxnxszsc */
      id: string;
      slug: string;
      /** @example Edinburgh Waverley Railway Station (EDB) */
      fromLabel: string;
      fromPoint: components['schemas']['Point'];
      /** Format: date-time */
      date: string;
      /** Format: date-time */
      requestTime: string;
      /**
       * @description URL to report JSON
       * @example https://...
       */
      url?: string;
    };
  };
  responses: {
    /** @description Error */
    DefaultErrorResponse: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        'application/json': components['schemas']['DefaultError'];
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
