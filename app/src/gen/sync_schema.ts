// Code generated by sync_schema/gen. DO NOT EDIT.
export type SyncGeometry = PointSyncGeometry | LineStringSyncGeometry;
export type PointSyncGeometry = {
  type: 'Point';
  coordinates: [number, number];
};
export type LineStringSyncGeometry = {
  type: 'LineString';
  coordinates: [number, number][];
};

export interface FeatureChange {
  id: string;
  parent?: string | null;
  idx?: string | null;
  geometry?: SyncGeometry | null;
  name?: string | null;
  color?: string | null;
  hidden?: boolean | null;
}

export function mergeFeature(target: FeatureChange, incoming: FeatureChange) {
  if (incoming.id !== target.id) {
    throw new Error('cannot merge Features: id differs');
  }
  if (incoming.parent !== undefined) {
    target.parent = incoming.parent;
  }
  if (incoming.idx !== undefined) {
    target.idx = incoming.idx;
  }
  if (incoming.geometry !== undefined) {
    target.geometry = incoming.geometry;
  }
  if (incoming.name !== undefined) {
    target.name = incoming.name;
  }
  if (incoming.color !== undefined) {
    target.color = incoming.color;
  }
  if (incoming.hidden !== undefined) {
    target.hidden = incoming.hidden;
  }
}
export interface LayerChange {
  id: string;
  idx?: string | null;
  opacity?: number | null;
}

export function mergeLayer(target: LayerChange, incoming: LayerChange) {
  if (incoming.id !== target.id) {
    throw new Error('cannot merge Layers: id differs');
  }
  if (incoming.idx !== undefined) {
    target.idx = incoming.idx;
  }
  if (incoming.opacity !== undefined) {
    target.opacity = incoming.opacity;
  }
}
