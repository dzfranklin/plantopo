// Code generated by mockery v2.49.2. DO NOT EDIT.

package pgeograph

import (
	prepo "github.com/dzfranklin/plantopo/backend/internal/prepo"
	mock "github.com/stretchr/testify/mock"
)

// MockImportRepo is an autogenerated mock type for the ImportRepo type
type MockImportRepo struct {
	mock.Mock
}

type MockImportRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockImportRepo) EXPECT() *MockImportRepo_Expecter {
	return &MockImportRepo_Expecter{mock: &_m.Mock}
}

// GetGeographIndexProgress provides a mock function with no fields
func (_m *MockImportRepo) GetGeographIndexProgress() (int, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGeographIndexProgress")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockImportRepo_GetGeographIndexProgress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGeographIndexProgress'
type MockImportRepo_GetGeographIndexProgress_Call struct {
	*mock.Call
}

// GetGeographIndexProgress is a helper method to define mock.On call
func (_e *MockImportRepo_Expecter) GetGeographIndexProgress() *MockImportRepo_GetGeographIndexProgress_Call {
	return &MockImportRepo_GetGeographIndexProgress_Call{Call: _e.mock.On("GetGeographIndexProgress")}
}

func (_c *MockImportRepo_GetGeographIndexProgress_Call) Run(run func()) *MockImportRepo_GetGeographIndexProgress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockImportRepo_GetGeographIndexProgress_Call) Return(_a0 int, _a1 error) *MockImportRepo_GetGeographIndexProgress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockImportRepo_GetGeographIndexProgress_Call) RunAndReturn(run func() (int, error)) *MockImportRepo_GetGeographIndexProgress_Call {
	_c.Call.Return(run)
	return _c
}

// ImportIfNotPresent provides a mock function with given fields: photo
func (_m *MockImportRepo) ImportIfNotPresent(photo prepo.Geophoto) error {
	ret := _m.Called(photo)

	if len(ret) == 0 {
		panic("no return value specified for ImportIfNotPresent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(prepo.Geophoto) error); ok {
		r0 = rf(photo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockImportRepo_ImportIfNotPresent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImportIfNotPresent'
type MockImportRepo_ImportIfNotPresent_Call struct {
	*mock.Call
}

// ImportIfNotPresent is a helper method to define mock.On call
//   - photo prepo.Geophoto
func (_e *MockImportRepo_Expecter) ImportIfNotPresent(photo interface{}) *MockImportRepo_ImportIfNotPresent_Call {
	return &MockImportRepo_ImportIfNotPresent_Call{Call: _e.mock.On("ImportIfNotPresent", photo)}
}

func (_c *MockImportRepo_ImportIfNotPresent_Call) Run(run func(photo prepo.Geophoto)) *MockImportRepo_ImportIfNotPresent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(prepo.Geophoto))
	})
	return _c
}

func (_c *MockImportRepo_ImportIfNotPresent_Call) Return(_a0 error) *MockImportRepo_ImportIfNotPresent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockImportRepo_ImportIfNotPresent_Call) RunAndReturn(run func(prepo.Geophoto) error) *MockImportRepo_ImportIfNotPresent_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGeographIndexProgress provides a mock function with given fields: cutoff
func (_m *MockImportRepo) UpdateGeographIndexProgress(cutoff int) error {
	ret := _m.Called(cutoff)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGeographIndexProgress")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(cutoff)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockImportRepo_UpdateGeographIndexProgress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGeographIndexProgress'
type MockImportRepo_UpdateGeographIndexProgress_Call struct {
	*mock.Call
}

// UpdateGeographIndexProgress is a helper method to define mock.On call
//   - cutoff int
func (_e *MockImportRepo_Expecter) UpdateGeographIndexProgress(cutoff interface{}) *MockImportRepo_UpdateGeographIndexProgress_Call {
	return &MockImportRepo_UpdateGeographIndexProgress_Call{Call: _e.mock.On("UpdateGeographIndexProgress", cutoff)}
}

func (_c *MockImportRepo_UpdateGeographIndexProgress_Call) Run(run func(cutoff int)) *MockImportRepo_UpdateGeographIndexProgress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockImportRepo_UpdateGeographIndexProgress_Call) Return(_a0 error) *MockImportRepo_UpdateGeographIndexProgress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockImportRepo_UpdateGeographIndexProgress_Call) RunAndReturn(run func(int) error) *MockImportRepo_UpdateGeographIndexProgress_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockImportRepo creates a new instance of MockImportRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockImportRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockImportRepo {
	mock := &MockImportRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
