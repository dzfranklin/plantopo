// Code generated by ogen, DO NOT EDIT.

package papi

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [3]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			origElem := elem
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "auth/"
				origElem := elem
				if l := len("auth/"); len(elem) >= l && elem[0:l] == "auth/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "authenticate"
					origElem := elem
					if l := len("authenticate"); len(elem) >= l && elem[0:l] == "authenticate" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "POST":
							s.handleAuthAuthenticatePostRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}
					switch elem[0] {
					case '-': // Prefix: "-browser"
						origElem := elem
						if l := len("-browser"); len(elem) >= l && elem[0:l] == "-browser" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleAuthAuthenticateBrowserPostRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				case 'c': // Prefix: "check"
					origElem := elem
					if l := len("check"); len(elem) >= l && elem[0:l] == "check" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleAuthCheckPostRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

					elem = origElem
				case 'm': // Prefix: "me"
					origElem := elem
					if l := len("me"); len(elem) >= l && elem[0:l] == "me" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleAuthMeGetRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

					elem = origElem
				case 'r': // Prefix: "re"
					origElem := elem
					if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'g': // Prefix: "gister"
						origElem := elem
						if l := len("gister"); len(elem) >= l && elem[0:l] == "gister" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "POST":
								s.handleAuthRegisterPostRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
						switch elem[0] {
						case '-': // Prefix: "-browser"
							origElem := elem
							if l := len("-browser"); len(elem) >= l && elem[0:l] == "-browser" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleAuthRegisterBrowserPostRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					case 'v': // Prefix: "voke"
						origElem := elem
						if l := len("voke"); len(elem) >= l && elem[0:l] == "voke" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "POST":
								s.handleAuthRevokePostRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
						switch elem[0] {
						case '-': // Prefix: "-browser"
							origElem := elem
							if l := len("-browser"); len(elem) >= l && elem[0:l] == "-browser" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleAuthRevokeBrowserPostRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'e': // Prefix: "elevation"
				origElem := elem
				if l := len("elevation"); len(elem) >= l && elem[0:l] == "elevation" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "POST":
						s.handleElevationPostRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "POST")
					}

					return
				}

				elem = origElem
			case 'g': // Prefix: "geo"
				origElem := elem
				if l := len("geo"); len(elem) >= l && elem[0:l] == "geo" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'p': // Prefix: "photos"
					origElem := elem
					if l := len("photos"); len(elem) >= l && elem[0:l] == "photos" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGeophotosGetRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

					elem = origElem
				case 's': // Prefix: "search"
					origElem := elem
					if l := len("search"); len(elem) >= l && elem[0:l] == "search" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGeosearchGetRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

					elem = origElem
				}

				elem = origElem
			case 'm': // Prefix: "munro-access/"
				origElem := elem
				if l := len("munro-access/"); len(elem) >= l && elem[0:l] == "munro-access/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'm': // Prefix: "munros"
					origElem := elem
					if l := len("munros"); len(elem) >= l && elem[0:l] == "munros" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleMunroAccessMunrosGetRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

					elem = origElem
				case 'p': // Prefix: "pregenerated-reports"
					origElem := elem
					if l := len("pregenerated-reports"); len(elem) >= l && elem[0:l] == "pregenerated-reports" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleMunroAccessPregeneratedReportsGetRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

					elem = origElem
				case 'r': // Prefix: "re"
					origElem := elem
					if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'p': // Prefix: "port/"
						origElem := elem
						if l := len("port/"); len(elem) >= l && elem[0:l] == "port/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleMunroAccessReportIDGetRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/status"
							origElem := elem
							if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleMunroAccessReportIDStatusGetRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					case 'q': // Prefix: "quest"
						origElem := elem
						if l := len("quest"); len(elem) >= l && elem[0:l] == "quest" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleMunroAccessRequestPostRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 's': // Prefix: "se"
				origElem := elem
				if l := len("se"); len(elem) >= l && elem[0:l] == "se" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'p': // Prefix: "pa-stations"
					origElem := elem
					if l := len("pa-stations"); len(elem) >= l && elem[0:l] == "pa-stations" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleSepaStationsGetRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

					elem = origElem
				case 't': // Prefix: "ttings"
					origElem := elem
					if l := len("ttings"); len(elem) >= l && elem[0:l] == "ttings" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleSettingsGetRequest([0]string{}, elemIsEscaped, w, r)
						case "PUT":
							s.handleSettingsPutRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,PUT")
						}

						return
					}

					elem = origElem
				}

				elem = origElem
			case 't': // Prefix: "tracks"
				origElem := elem
				if l := len("tracks"); len(elem) >= l && elem[0:l] == "tracks" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleTracksGetRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleTracksPostRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/t"
					origElem := elem
					if l := len("/t"); len(elem) >= l && elem[0:l] == "/t" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'i': // Prefix: "ile/"
						origElem := elem
						if l := len("ile/"); len(elem) >= l && elem[0:l] == "ile/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "z"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "x"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[1] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "y"
								// Match until "."
								idx := strings.IndexByte(elem, '.')
								if idx < 0 {
									idx = len(elem)
								}
								args[2] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '.': // Prefix: ".mvt"
									origElem := elem
									if l := len(".mvt"); len(elem) >= l && elem[0:l] == ".mvt" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleTracksTileZXYMvtGetRequest([3]string{
												args[0],
												args[1],
												args[2],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					case 'r': // Prefix: "rack/"
						origElem := elem
						if l := len("rack/"); len(elem) >= l && elem[0:l] == "rack/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "DELETE":
								s.handleTracksTrackIDDeleteRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "GET":
								s.handleTracksTrackIDGetRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "PATCH":
								s.handleTracksTrackIDPatchRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PATCH")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'w': // Prefix: "weather/short-uk"
				origElem := elem
				if l := len("weather/short-uk"); len(elem) >= l && elem[0:l] == "weather/short-uk" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleWeatherShortUkGetRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [3]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			origElem := elem
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "auth/"
				origElem := elem
				if l := len("auth/"); len(elem) >= l && elem[0:l] == "auth/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "authenticate"
					origElem := elem
					if l := len("authenticate"); len(elem) >= l && elem[0:l] == "authenticate" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "POST":
							r.name = "AuthAuthenticatePost"
							r.summary = "Authenticate as a user (see /auth/authenticate-browser if you are the frontend)"
							r.operationID = ""
							r.pathPattern = "/auth/authenticate"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '-': // Prefix: "-browser"
						origElem := elem
						if l := len("-browser"); len(elem) >= l && elem[0:l] == "-browser" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = "AuthAuthenticateBrowserPost"
								r.summary = "Authenticate and store the token in the requesting browser's cookie jar"
								r.operationID = ""
								r.pathPattern = "/auth/authenticate-browser"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				case 'c': // Prefix: "check"
					origElem := elem
					if l := len("check"); len(elem) >= l && elem[0:l] == "check" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = "AuthCheckPost"
							r.summary = "Check if you are authenticated"
							r.operationID = ""
							r.pathPattern = "/auth/check"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 'm': // Prefix: "me"
					origElem := elem
					if l := len("me"); len(elem) >= l && elem[0:l] == "me" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = "AuthMeGet"
							r.summary = "Get the authenticated user"
							r.operationID = ""
							r.pathPattern = "/auth/me"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 'r': // Prefix: "re"
					origElem := elem
					if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'g': // Prefix: "gister"
						origElem := elem
						if l := len("gister"); len(elem) >= l && elem[0:l] == "gister" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								r.name = "AuthRegisterPost"
								r.summary = "Register a new account"
								r.operationID = ""
								r.pathPattern = "/auth/register"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '-': // Prefix: "-browser"
							origElem := elem
							if l := len("-browser"); len(elem) >= l && elem[0:l] == "-browser" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = "AuthRegisterBrowserPost"
									r.summary = "Register a new account and store the token in the requesting browser's cookie jar"
									r.operationID = ""
									r.pathPattern = "/auth/register-browser"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					case 'v': // Prefix: "voke"
						origElem := elem
						if l := len("voke"); len(elem) >= l && elem[0:l] == "voke" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								r.name = "AuthRevokePost"
								r.summary = "Revoke a token"
								r.operationID = ""
								r.pathPattern = "/auth/revoke"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '-': // Prefix: "-browser"
							origElem := elem
							if l := len("-browser"); len(elem) >= l && elem[0:l] == "-browser" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = "AuthRevokeBrowserPost"
									r.summary = "Revoke the token stored in the requesting browser's cookie jar"
									r.operationID = ""
									r.pathPattern = "/auth/revoke-browser"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'e': // Prefix: "elevation"
				origElem := elem
				if l := len("elevation"); len(elem) >= l && elem[0:l] == "elevation" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "POST":
						r.name = "ElevationPost"
						r.summary = "Lookup elevations for a list of coordinates"
						r.operationID = ""
						r.pathPattern = "/elevation"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

				elem = origElem
			case 'g': // Prefix: "geo"
				origElem := elem
				if l := len("geo"); len(elem) >= l && elem[0:l] == "geo" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'p': // Prefix: "photos"
					origElem := elem
					if l := len("photos"); len(elem) >= l && elem[0:l] == "photos" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = "GeophotosGet"
							r.summary = "Get metadata by ID"
							r.operationID = ""
							r.pathPattern = "/geophotos"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 's': // Prefix: "search"
					origElem := elem
					if l := len("search"); len(elem) >= l && elem[0:l] == "search" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = "GeosearchGet"
							r.summary = "Search things that can be displayed on a map"
							r.operationID = ""
							r.pathPattern = "/geosearch"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				}

				elem = origElem
			case 'm': // Prefix: "munro-access/"
				origElem := elem
				if l := len("munro-access/"); len(elem) >= l && elem[0:l] == "munro-access/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'm': // Prefix: "munros"
					origElem := elem
					if l := len("munros"); len(elem) >= l && elem[0:l] == "munros" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = "MunroAccessMunrosGet"
							r.summary = "List munros"
							r.operationID = ""
							r.pathPattern = "/munro-access/munros"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 'p': // Prefix: "pregenerated-reports"
					origElem := elem
					if l := len("pregenerated-reports"); len(elem) >= l && elem[0:l] == "pregenerated-reports" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = "MunroAccessPregeneratedReportsGet"
							r.summary = "Get pregenerated reports for common locations"
							r.operationID = ""
							r.pathPattern = "/munro-access/pregenerated-reports"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 'r': // Prefix: "re"
					origElem := elem
					if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'p': // Prefix: "port/"
						origElem := elem
						if l := len("port/"); len(elem) >= l && elem[0:l] == "port/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "MunroAccessReportIDGet"
								r.summary = "Get a report"
								r.operationID = ""
								r.pathPattern = "/munro-access/report/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/status"
							origElem := elem
							if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "MunroAccessReportIDStatusGet"
									r.summary = "Get report generation status"
									r.operationID = ""
									r.pathPattern = "/munro-access/report/{id}/status"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					case 'q': // Prefix: "quest"
						origElem := elem
						if l := len("quest"); len(elem) >= l && elem[0:l] == "quest" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = "MunroAccessRequestPost"
								r.summary = "Request a report be generated"
								r.operationID = ""
								r.pathPattern = "/munro-access/request"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 's': // Prefix: "se"
				origElem := elem
				if l := len("se"); len(elem) >= l && elem[0:l] == "se" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'p': // Prefix: "pa-stations"
					origElem := elem
					if l := len("pa-stations"); len(elem) >= l && elem[0:l] == "pa-stations" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = "SepaStationsGet"
							r.summary = "List SEPA monitoring stations as GeoJSON"
							r.operationID = ""
							r.pathPattern = "/sepa-stations"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 't': // Prefix: "ttings"
					origElem := elem
					if l := len("ttings"); len(elem) >= l && elem[0:l] == "ttings" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = "SettingsGet"
							r.summary = "Get settings"
							r.operationID = ""
							r.pathPattern = "/settings"
							r.args = args
							r.count = 0
							return r, true
						case "PUT":
							r.name = "SettingsPut"
							r.summary = "Update settings"
							r.operationID = ""
							r.pathPattern = "/settings"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				}

				elem = origElem
			case 't': // Prefix: "tracks"
				origElem := elem
				if l := len("tracks"); len(elem) >= l && elem[0:l] == "tracks" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "TracksGet"
						r.summary = "List tracks"
						r.operationID = ""
						r.pathPattern = "/tracks"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "TracksPost"
						r.summary = "Create track"
						r.operationID = ""
						r.pathPattern = "/tracks"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/t"
					origElem := elem
					if l := len("/t"); len(elem) >= l && elem[0:l] == "/t" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'i': // Prefix: "ile/"
						origElem := elem
						if l := len("ile/"); len(elem) >= l && elem[0:l] == "ile/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "z"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "x"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[1] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "y"
								// Match until "."
								idx := strings.IndexByte(elem, '.')
								if idx < 0 {
									idx = len(elem)
								}
								args[2] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '.': // Prefix: ".mvt"
									origElem := elem
									if l := len(".mvt"); len(elem) >= l && elem[0:l] == ".mvt" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = "TracksTileZXYMvtGet"
											r.summary = "Get MVT tile"
											r.operationID = ""
											r.pathPattern = "/tracks/tile/{z}/{x}/{y}.mvt"
											r.args = args
											r.count = 3
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					case 'r': // Prefix: "rack/"
						origElem := elem
						if l := len("rack/"); len(elem) >= l && elem[0:l] == "rack/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "DELETE":
								r.name = "TracksTrackIDDelete"
								r.summary = "Delete track"
								r.operationID = ""
								r.pathPattern = "/tracks/track/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = "TracksTrackIDGet"
								r.summary = "Get track"
								r.operationID = ""
								r.pathPattern = "/tracks/track/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "PATCH":
								r.name = "TracksTrackIDPatch"
								r.summary = "Update track"
								r.operationID = ""
								r.pathPattern = "/tracks/track/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'w': // Prefix: "weather/short-uk"
				origElem := elem
				if l := len("weather/short-uk"); len(elem) >= l && elem[0:l] == "weather/short-uk" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "GET":
						r.name = "WeatherShortUkGet"
						r.summary = "Find short format weather forecasts for a place in the UK"
						r.operationID = ""
						r.pathPattern = "/weather/short-uk"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	return r, false
}
