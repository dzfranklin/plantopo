// Code generated by ogen, DO NOT EDIT.

package papi

import (
	"fmt"
	"io"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

func (s *DefaultErrorResponseStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

type AuthCheckPostOK struct {
	UserID UserID `json:"userID"`
}

// GetUserID returns the value of UserID.
func (s *AuthCheckPostOK) GetUserID() UserID {
	return s.UserID
}

// SetUserID sets the value of UserID.
func (s *AuthCheckPostOK) SetUserID(val UserID) {
	s.UserID = val
}

type AuthMeGetOK struct {
	User User `json:"user"`
}

// GetUser returns the value of User.
func (s *AuthMeGetOK) GetUser() User {
	return s.User
}

// SetUser sets the value of User.
func (s *AuthMeGetOK) SetUser(val User) {
	s.User = val
}

// Ref: #/components/schemas/AuthRegisterRequest
type AuthRegisterRequest struct {
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

// GetName returns the value of Name.
func (s *AuthRegisterRequest) GetName() string {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *AuthRegisterRequest) GetEmail() string {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *AuthRegisterRequest) GetPassword() string {
	return s.Password
}

// SetName sets the value of Name.
func (s *AuthRegisterRequest) SetName(val string) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *AuthRegisterRequest) SetEmail(val string) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *AuthRegisterRequest) SetPassword(val string) {
	s.Password = val
}

type AuthRevokeBrowserPostOK struct{}

// AuthRevokeBrowserPostOKHeaders wraps AuthRevokeBrowserPostOK with response headers.
type AuthRevokeBrowserPostOKHeaders struct {
	SetCookie OptString
	Response  AuthRevokeBrowserPostOK
}

// GetSetCookie returns the value of SetCookie.
func (s *AuthRevokeBrowserPostOKHeaders) GetSetCookie() OptString {
	return s.SetCookie
}

// GetResponse returns the value of Response.
func (s *AuthRevokeBrowserPostOKHeaders) GetResponse() AuthRevokeBrowserPostOK {
	return s.Response
}

// SetSetCookie sets the value of SetCookie.
func (s *AuthRevokeBrowserPostOKHeaders) SetSetCookie(val OptString) {
	s.SetCookie = val
}

// SetResponse sets the value of Response.
func (s *AuthRevokeBrowserPostOKHeaders) SetResponse(val AuthRevokeBrowserPostOK) {
	s.Response = val
}

type AuthRevokePostOK struct{}

// Ref: #/components/schemas/AuthRevokeReq
type AuthRevokeReq struct {
	Token Token `json:"token"`
}

// GetToken returns the value of Token.
func (s *AuthRevokeReq) GetToken() Token {
	return s.Token
}

// SetToken sets the value of Token.
func (s *AuthRevokeReq) SetToken(val Token) {
	s.Token = val
}

// Ref: #/components/schemas/AuthenticateBrowserOK
type AuthenticateBrowserOK struct {
	User User `json:"user"`
}

// GetUser returns the value of User.
func (s *AuthenticateBrowserOK) GetUser() User {
	return s.User
}

// SetUser sets the value of User.
func (s *AuthenticateBrowserOK) SetUser(val User) {
	s.User = val
}

// AuthenticateBrowserOKHeaders wraps AuthenticateBrowserOK with response headers.
type AuthenticateBrowserOKHeaders struct {
	SetCookie OptSetSessionCookieHeader
	Response  AuthenticateBrowserOK
}

// GetSetCookie returns the value of SetCookie.
func (s *AuthenticateBrowserOKHeaders) GetSetCookie() OptSetSessionCookieHeader {
	return s.SetCookie
}

// GetResponse returns the value of Response.
func (s *AuthenticateBrowserOKHeaders) GetResponse() AuthenticateBrowserOK {
	return s.Response
}

// SetSetCookie sets the value of SetCookie.
func (s *AuthenticateBrowserOKHeaders) SetSetCookie(val OptSetSessionCookieHeader) {
	s.SetCookie = val
}

// SetResponse sets the value of Response.
func (s *AuthenticateBrowserOKHeaders) SetResponse(val AuthenticateBrowserOK) {
	s.Response = val
}

// Ref: #/components/schemas/AuthenticateOK
type AuthenticateOK struct {
	Token Token `json:"token"`
	User  User  `json:"user"`
}

// GetToken returns the value of Token.
func (s *AuthenticateOK) GetToken() Token {
	return s.Token
}

// GetUser returns the value of User.
func (s *AuthenticateOK) GetUser() User {
	return s.User
}

// SetToken sets the value of Token.
func (s *AuthenticateOK) SetToken(val Token) {
	s.Token = val
}

// SetUser sets the value of User.
func (s *AuthenticateOK) SetUser(val User) {
	s.User = val
}

// Ref: #/components/schemas/AuthenticateReq
type AuthenticateReq struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// GetEmail returns the value of Email.
func (s *AuthenticateReq) GetEmail() string {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *AuthenticateReq) GetPassword() string {
	return s.Password
}

// SetEmail sets the value of Email.
func (s *AuthenticateReq) SetEmail(val string) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *AuthenticateReq) SetPassword(val string) {
	s.Password = val
}

type Bearer struct {
	Token string
}

// GetToken returns the value of Token.
func (s *Bearer) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *Bearer) SetToken(val string) {
	s.Token = val
}

type Browser struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *Browser) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *Browser) SetAPIKey(val string) {
	s.APIKey = val
}

// Ref: #/components/schemas/DefaultError
type DefaultError struct {
	Code              int                 `json:"code"`
	Message           string              `json:"message"`
	RetryAfterSeconds OptInt              `json:"retryAfterSeconds"`
	ValidationErrors  OptValidationErrors `json:"validationErrors"`
}

// GetCode returns the value of Code.
func (s *DefaultError) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *DefaultError) GetMessage() string {
	return s.Message
}

// GetRetryAfterSeconds returns the value of RetryAfterSeconds.
func (s *DefaultError) GetRetryAfterSeconds() OptInt {
	return s.RetryAfterSeconds
}

// GetValidationErrors returns the value of ValidationErrors.
func (s *DefaultError) GetValidationErrors() OptValidationErrors {
	return s.ValidationErrors
}

// SetCode sets the value of Code.
func (s *DefaultError) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *DefaultError) SetMessage(val string) {
	s.Message = val
}

// SetRetryAfterSeconds sets the value of RetryAfterSeconds.
func (s *DefaultError) SetRetryAfterSeconds(val OptInt) {
	s.RetryAfterSeconds = val
}

// SetValidationErrors sets the value of ValidationErrors.
func (s *DefaultError) SetValidationErrors(val OptValidationErrors) {
	s.ValidationErrors = val
}

// DefaultErrorResponseStatusCode wraps DefaultError with StatusCode.
type DefaultErrorResponseStatusCode struct {
	StatusCode int
	Response   DefaultError
}

// GetStatusCode returns the value of StatusCode.
func (s *DefaultErrorResponseStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *DefaultErrorResponseStatusCode) GetResponse() DefaultError {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *DefaultErrorResponseStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *DefaultErrorResponseStatusCode) SetResponse(val DefaultError) {
	s.Response = val
}

// Ref: #/components/schemas/ElevationPostOK
type ElevationPostOK struct {
	Elevation []float64 `json:"elevation"`
}

// GetElevation returns the value of Elevation.
func (s *ElevationPostOK) GetElevation() []float64 {
	return s.Elevation
}

// SetElevation sets the value of Elevation.
func (s *ElevationPostOK) SetElevation(val []float64) {
	s.Elevation = val
}

// Ref: #/components/schemas/ElevationPostReq
type ElevationPostReq struct {
	Coordinates [][]float64 `json:"coordinates"`
}

// GetCoordinates returns the value of Coordinates.
func (s *ElevationPostReq) GetCoordinates() [][]float64 {
	return s.Coordinates
}

// SetCoordinates sets the value of Coordinates.
func (s *ElevationPostReq) SetCoordinates(val [][]float64) {
	s.Coordinates = val
}

type Geometry jx.Raw

// Ref: #/components/schemas/Geophoto
type Geophoto struct {
	ID     int    `json:"id"`
	Source OptInt `json:"source"`
	// The source's id for this image.
	SourceID        OptString   `json:"sourceID"`
	IndexedAt       OptDateTime `json:"indexedAt"`
	AttributionText OptString   `json:"attributionText"`
	AttributionLink OptString   `json:"attributionLink"`
	Licenses        []int       `json:"licenses"`
	Image           Image       `json:"image"`
	SmallImage      OptImage    `json:"smallImage"`
	Point           Point       `json:"point"`
	Title           OptString   `json:"title"`
	DateTaken       OptDateTime `json:"dateTaken"`
}

// GetID returns the value of ID.
func (s *Geophoto) GetID() int {
	return s.ID
}

// GetSource returns the value of Source.
func (s *Geophoto) GetSource() OptInt {
	return s.Source
}

// GetSourceID returns the value of SourceID.
func (s *Geophoto) GetSourceID() OptString {
	return s.SourceID
}

// GetIndexedAt returns the value of IndexedAt.
func (s *Geophoto) GetIndexedAt() OptDateTime {
	return s.IndexedAt
}

// GetAttributionText returns the value of AttributionText.
func (s *Geophoto) GetAttributionText() OptString {
	return s.AttributionText
}

// GetAttributionLink returns the value of AttributionLink.
func (s *Geophoto) GetAttributionLink() OptString {
	return s.AttributionLink
}

// GetLicenses returns the value of Licenses.
func (s *Geophoto) GetLicenses() []int {
	return s.Licenses
}

// GetImage returns the value of Image.
func (s *Geophoto) GetImage() Image {
	return s.Image
}

// GetSmallImage returns the value of SmallImage.
func (s *Geophoto) GetSmallImage() OptImage {
	return s.SmallImage
}

// GetPoint returns the value of Point.
func (s *Geophoto) GetPoint() Point {
	return s.Point
}

// GetTitle returns the value of Title.
func (s *Geophoto) GetTitle() OptString {
	return s.Title
}

// GetDateTaken returns the value of DateTaken.
func (s *Geophoto) GetDateTaken() OptDateTime {
	return s.DateTaken
}

// SetID sets the value of ID.
func (s *Geophoto) SetID(val int) {
	s.ID = val
}

// SetSource sets the value of Source.
func (s *Geophoto) SetSource(val OptInt) {
	s.Source = val
}

// SetSourceID sets the value of SourceID.
func (s *Geophoto) SetSourceID(val OptString) {
	s.SourceID = val
}

// SetIndexedAt sets the value of IndexedAt.
func (s *Geophoto) SetIndexedAt(val OptDateTime) {
	s.IndexedAt = val
}

// SetAttributionText sets the value of AttributionText.
func (s *Geophoto) SetAttributionText(val OptString) {
	s.AttributionText = val
}

// SetAttributionLink sets the value of AttributionLink.
func (s *Geophoto) SetAttributionLink(val OptString) {
	s.AttributionLink = val
}

// SetLicenses sets the value of Licenses.
func (s *Geophoto) SetLicenses(val []int) {
	s.Licenses = val
}

// SetImage sets the value of Image.
func (s *Geophoto) SetImage(val Image) {
	s.Image = val
}

// SetSmallImage sets the value of SmallImage.
func (s *Geophoto) SetSmallImage(val OptImage) {
	s.SmallImage = val
}

// SetPoint sets the value of Point.
func (s *Geophoto) SetPoint(val Point) {
	s.Point = val
}

// SetTitle sets the value of Title.
func (s *Geophoto) SetTitle(val OptString) {
	s.Title = val
}

// SetDateTaken sets the value of DateTaken.
func (s *Geophoto) SetDateTaken(val OptDateTime) {
	s.DateTaken = val
}

type GeophotosGetOK struct {
	Photos []Geophoto `json:"photos"`
}

// GetPhotos returns the value of Photos.
func (s *GeophotosGetOK) GetPhotos() []Geophoto {
	return s.Photos
}

// SetPhotos sets the value of Photos.
func (s *GeophotosGetOK) SetPhotos(val []Geophoto) {
	s.Photos = val
}

type GeosearchGetOK struct {
	// The user the search results were generated for, if any.
	User    OptString      `json:"user"`
	Results []SearchResult `json:"results"`
}

// GetUser returns the value of User.
func (s *GeosearchGetOK) GetUser() OptString {
	return s.User
}

// GetResults returns the value of Results.
func (s *GeosearchGetOK) GetResults() []SearchResult {
	return s.Results
}

// SetUser sets the value of User.
func (s *GeosearchGetOK) SetUser(val OptString) {
	s.User = val
}

// SetResults sets the value of Results.
func (s *GeosearchGetOK) SetResults(val []SearchResult) {
	s.Results = val
}

// Ref: #/components/schemas/Image
type Image struct {
	Src    string `json:"src"`
	Width  int    `json:"width"`
	Height int    `json:"height"`
}

// GetSrc returns the value of Src.
func (s *Image) GetSrc() string {
	return s.Src
}

// GetWidth returns the value of Width.
func (s *Image) GetWidth() int {
	return s.Width
}

// GetHeight returns the value of Height.
func (s *Image) GetHeight() int {
	return s.Height
}

// SetSrc sets the value of Src.
func (s *Image) SetSrc(val string) {
	s.Src = val
}

// SetWidth sets the value of Width.
func (s *Image) SetWidth(val int) {
	s.Width = val
}

// SetHeight sets the value of Height.
func (s *Image) SetHeight(val int) {
	s.Height = val
}

type MVTTile struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s MVTTile) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// MVTTileHeaders wraps MVTTile with response headers.
type MVTTileHeaders struct {
	ContentEncoding OptString
	Response        MVTTile
}

// GetContentEncoding returns the value of ContentEncoding.
func (s *MVTTileHeaders) GetContentEncoding() OptString {
	return s.ContentEncoding
}

// GetResponse returns the value of Response.
func (s *MVTTileHeaders) GetResponse() MVTTile {
	return s.Response
}

// SetContentEncoding sets the value of ContentEncoding.
func (s *MVTTileHeaders) SetContentEncoding(val OptString) {
	s.ContentEncoding = val
}

// SetResponse sets the value of Response.
func (s *MVTTileHeaders) SetResponse(val MVTTile) {
	s.Response = val
}

type MunroAccessMunrosGetOK struct {
	Munros MunroAccessMunrosGetOKMunros `json:"munros"`
}

// GetMunros returns the value of Munros.
func (s *MunroAccessMunrosGetOK) GetMunros() MunroAccessMunrosGetOKMunros {
	return s.Munros
}

// SetMunros sets the value of Munros.
func (s *MunroAccessMunrosGetOK) SetMunros(val MunroAccessMunrosGetOKMunros) {
	s.Munros = val
}

type MunroAccessMunrosGetOKMunros struct {
	Type     MunroAccessMunrosGetOKMunrosType           `json:"type"`
	Features []MunroAccessMunrosGetOKMunrosFeaturesItem `json:"features"`
}

// GetType returns the value of Type.
func (s *MunroAccessMunrosGetOKMunros) GetType() MunroAccessMunrosGetOKMunrosType {
	return s.Type
}

// GetFeatures returns the value of Features.
func (s *MunroAccessMunrosGetOKMunros) GetFeatures() []MunroAccessMunrosGetOKMunrosFeaturesItem {
	return s.Features
}

// SetType sets the value of Type.
func (s *MunroAccessMunrosGetOKMunros) SetType(val MunroAccessMunrosGetOKMunrosType) {
	s.Type = val
}

// SetFeatures sets the value of Features.
func (s *MunroAccessMunrosGetOKMunros) SetFeatures(val []MunroAccessMunrosGetOKMunrosFeaturesItem) {
	s.Features = val
}

type MunroAccessMunrosGetOKMunrosFeaturesItem struct {
	Type       MunroAccessMunrosGetOKMunrosFeaturesItemType       `json:"type"`
	ID         int                                                `json:"id"`
	Properties MunroAccessMunrosGetOKMunrosFeaturesItemProperties `json:"properties"`
	Geometry   MunroAccessMunrosGetOKMunrosFeaturesItemGeometry   `json:"geometry"`
}

// GetType returns the value of Type.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItem) GetType() MunroAccessMunrosGetOKMunrosFeaturesItemType {
	return s.Type
}

// GetID returns the value of ID.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItem) GetID() int {
	return s.ID
}

// GetProperties returns the value of Properties.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItem) GetProperties() MunroAccessMunrosGetOKMunrosFeaturesItemProperties {
	return s.Properties
}

// GetGeometry returns the value of Geometry.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItem) GetGeometry() MunroAccessMunrosGetOKMunrosFeaturesItemGeometry {
	return s.Geometry
}

// SetType sets the value of Type.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItem) SetType(val MunroAccessMunrosGetOKMunrosFeaturesItemType) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItem) SetID(val int) {
	s.ID = val
}

// SetProperties sets the value of Properties.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItem) SetProperties(val MunroAccessMunrosGetOKMunrosFeaturesItemProperties) {
	s.Properties = val
}

// SetGeometry sets the value of Geometry.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItem) SetGeometry(val MunroAccessMunrosGetOKMunrosFeaturesItemGeometry) {
	s.Geometry = val
}

type MunroAccessMunrosGetOKMunrosFeaturesItemGeometry struct {
	Type        MunroAccessMunrosGetOKMunrosFeaturesItemGeometryType `json:"type"`
	Coordinates []float64                                            `json:"coordinates"`
}

// GetType returns the value of Type.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemGeometry) GetType() MunroAccessMunrosGetOKMunrosFeaturesItemGeometryType {
	return s.Type
}

// GetCoordinates returns the value of Coordinates.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemGeometry) GetCoordinates() []float64 {
	return s.Coordinates
}

// SetType sets the value of Type.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemGeometry) SetType(val MunroAccessMunrosGetOKMunrosFeaturesItemGeometryType) {
	s.Type = val
}

// SetCoordinates sets the value of Coordinates.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemGeometry) SetCoordinates(val []float64) {
	s.Coordinates = val
}

type MunroAccessMunrosGetOKMunrosFeaturesItemGeometryType string

const (
	MunroAccessMunrosGetOKMunrosFeaturesItemGeometryTypePoint MunroAccessMunrosGetOKMunrosFeaturesItemGeometryType = "Point"
)

// AllValues returns all MunroAccessMunrosGetOKMunrosFeaturesItemGeometryType values.
func (MunroAccessMunrosGetOKMunrosFeaturesItemGeometryType) AllValues() []MunroAccessMunrosGetOKMunrosFeaturesItemGeometryType {
	return []MunroAccessMunrosGetOKMunrosFeaturesItemGeometryType{
		MunroAccessMunrosGetOKMunrosFeaturesItemGeometryTypePoint,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s MunroAccessMunrosGetOKMunrosFeaturesItemGeometryType) MarshalText() ([]byte, error) {
	switch s {
	case MunroAccessMunrosGetOKMunrosFeaturesItemGeometryTypePoint:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemGeometryType) UnmarshalText(data []byte) error {
	switch MunroAccessMunrosGetOKMunrosFeaturesItemGeometryType(data) {
	case MunroAccessMunrosGetOKMunrosFeaturesItemGeometryTypePoint:
		*s = MunroAccessMunrosGetOKMunrosFeaturesItemGeometryTypePoint
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type MunroAccessMunrosGetOKMunrosFeaturesItemProperties struct {
	Name   string                                                     `json:"name"`
	Meters float64                                                    `json:"meters"`
	Photo  OptMunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto `json:"photo"`
}

// GetName returns the value of Name.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemProperties) GetName() string {
	return s.Name
}

// GetMeters returns the value of Meters.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemProperties) GetMeters() float64 {
	return s.Meters
}

// GetPhoto returns the value of Photo.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemProperties) GetPhoto() OptMunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto {
	return s.Photo
}

// SetName sets the value of Name.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemProperties) SetName(val string) {
	s.Name = val
}

// SetMeters sets the value of Meters.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemProperties) SetMeters(val float64) {
	s.Meters = val
}

// SetPhoto sets the value of Photo.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemProperties) SetPhoto(val OptMunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto) {
	s.Photo = val
}

type MunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto struct {
	Source     string    `json:"source"`
	Width      int       `json:"width"`
	Height     int       `json:"height"`
	Author     OptString `json:"author"`
	SourceText OptString `json:"sourceText"`
	SourceLink OptString `json:"sourceLink"`
}

// GetSource returns the value of Source.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto) GetSource() string {
	return s.Source
}

// GetWidth returns the value of Width.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto) GetWidth() int {
	return s.Width
}

// GetHeight returns the value of Height.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto) GetHeight() int {
	return s.Height
}

// GetAuthor returns the value of Author.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto) GetAuthor() OptString {
	return s.Author
}

// GetSourceText returns the value of SourceText.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto) GetSourceText() OptString {
	return s.SourceText
}

// GetSourceLink returns the value of SourceLink.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto) GetSourceLink() OptString {
	return s.SourceLink
}

// SetSource sets the value of Source.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto) SetSource(val string) {
	s.Source = val
}

// SetWidth sets the value of Width.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto) SetWidth(val int) {
	s.Width = val
}

// SetHeight sets the value of Height.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto) SetHeight(val int) {
	s.Height = val
}

// SetAuthor sets the value of Author.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto) SetAuthor(val OptString) {
	s.Author = val
}

// SetSourceText sets the value of SourceText.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto) SetSourceText(val OptString) {
	s.SourceText = val
}

// SetSourceLink sets the value of SourceLink.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto) SetSourceLink(val OptString) {
	s.SourceLink = val
}

type MunroAccessMunrosGetOKMunrosFeaturesItemType string

const (
	MunroAccessMunrosGetOKMunrosFeaturesItemTypeFeature MunroAccessMunrosGetOKMunrosFeaturesItemType = "Feature"
)

// AllValues returns all MunroAccessMunrosGetOKMunrosFeaturesItemType values.
func (MunroAccessMunrosGetOKMunrosFeaturesItemType) AllValues() []MunroAccessMunrosGetOKMunrosFeaturesItemType {
	return []MunroAccessMunrosGetOKMunrosFeaturesItemType{
		MunroAccessMunrosGetOKMunrosFeaturesItemTypeFeature,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s MunroAccessMunrosGetOKMunrosFeaturesItemType) MarshalText() ([]byte, error) {
	switch s {
	case MunroAccessMunrosGetOKMunrosFeaturesItemTypeFeature:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemType) UnmarshalText(data []byte) error {
	switch MunroAccessMunrosGetOKMunrosFeaturesItemType(data) {
	case MunroAccessMunrosGetOKMunrosFeaturesItemTypeFeature:
		*s = MunroAccessMunrosGetOKMunrosFeaturesItemTypeFeature
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type MunroAccessMunrosGetOKMunrosType string

const (
	MunroAccessMunrosGetOKMunrosTypeFeatureCollection MunroAccessMunrosGetOKMunrosType = "FeatureCollection"
)

// AllValues returns all MunroAccessMunrosGetOKMunrosType values.
func (MunroAccessMunrosGetOKMunrosType) AllValues() []MunroAccessMunrosGetOKMunrosType {
	return []MunroAccessMunrosGetOKMunrosType{
		MunroAccessMunrosGetOKMunrosTypeFeatureCollection,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s MunroAccessMunrosGetOKMunrosType) MarshalText() ([]byte, error) {
	switch s {
	case MunroAccessMunrosGetOKMunrosTypeFeatureCollection:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *MunroAccessMunrosGetOKMunrosType) UnmarshalText(data []byte) error {
	switch MunroAccessMunrosGetOKMunrosType(data) {
	case MunroAccessMunrosGetOKMunrosTypeFeatureCollection:
		*s = MunroAccessMunrosGetOKMunrosTypeFeatureCollection
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type MunroAccessPregeneratedReportsGetOK struct {
	Reports []MunroAccessReportMeta `json:"reports"`
}

// GetReports returns the value of Reports.
func (s *MunroAccessPregeneratedReportsGetOK) GetReports() []MunroAccessReportMeta {
	return s.Reports
}

// SetReports sets the value of Reports.
func (s *MunroAccessPregeneratedReportsGetOK) SetReports(val []MunroAccessReportMeta) {
	s.Reports = val
}

// MunroAccessReportIDGetTemporaryRedirect is response for MunroAccessReportIDGet operation.
type MunroAccessReportIDGetTemporaryRedirect struct {
	Location OptString
}

// GetLocation returns the value of Location.
func (s *MunroAccessReportIDGetTemporaryRedirect) GetLocation() OptString {
	return s.Location
}

// SetLocation sets the value of Location.
func (s *MunroAccessReportIDGetTemporaryRedirect) SetLocation(val OptString) {
	s.Location = val
}

// Ref: #/components/schemas/MunroAccessReportMeta
type MunroAccessReportMeta struct {
	ID          string    `json:"id"`
	Slug        string    `json:"slug"`
	FromLabel   string    `json:"fromLabel"`
	FromPoint   Point     `json:"fromPoint"`
	Date        time.Time `json:"date"`
	RequestTime time.Time `json:"requestTime"`
	// URL to report JSON.
	URL OptString `json:"url"`
}

// GetID returns the value of ID.
func (s *MunroAccessReportMeta) GetID() string {
	return s.ID
}

// GetSlug returns the value of Slug.
func (s *MunroAccessReportMeta) GetSlug() string {
	return s.Slug
}

// GetFromLabel returns the value of FromLabel.
func (s *MunroAccessReportMeta) GetFromLabel() string {
	return s.FromLabel
}

// GetFromPoint returns the value of FromPoint.
func (s *MunroAccessReportMeta) GetFromPoint() Point {
	return s.FromPoint
}

// GetDate returns the value of Date.
func (s *MunroAccessReportMeta) GetDate() time.Time {
	return s.Date
}

// GetRequestTime returns the value of RequestTime.
func (s *MunroAccessReportMeta) GetRequestTime() time.Time {
	return s.RequestTime
}

// GetURL returns the value of URL.
func (s *MunroAccessReportMeta) GetURL() OptString {
	return s.URL
}

// SetID sets the value of ID.
func (s *MunroAccessReportMeta) SetID(val string) {
	s.ID = val
}

// SetSlug sets the value of Slug.
func (s *MunroAccessReportMeta) SetSlug(val string) {
	s.Slug = val
}

// SetFromLabel sets the value of FromLabel.
func (s *MunroAccessReportMeta) SetFromLabel(val string) {
	s.FromLabel = val
}

// SetFromPoint sets the value of FromPoint.
func (s *MunroAccessReportMeta) SetFromPoint(val Point) {
	s.FromPoint = val
}

// SetDate sets the value of Date.
func (s *MunroAccessReportMeta) SetDate(val time.Time) {
	s.Date = val
}

// SetRequestTime sets the value of RequestTime.
func (s *MunroAccessReportMeta) SetRequestTime(val time.Time) {
	s.RequestTime = val
}

// SetURL sets the value of URL.
func (s *MunroAccessReportMeta) SetURL(val OptString) {
	s.URL = val
}

// Ref: #/components/schemas/MunroAccessReportStatus
type MunroAccessReportStatus struct {
	ID        string                        `json:"id"`
	Timestamp time.Time                     `json:"timestamp"`
	Status    MunroAccessReportStatusStatus `json:"status"`
	Report    MunroAccessReportMeta         `json:"report"`
}

// GetID returns the value of ID.
func (s *MunroAccessReportStatus) GetID() string {
	return s.ID
}

// GetTimestamp returns the value of Timestamp.
func (s *MunroAccessReportStatus) GetTimestamp() time.Time {
	return s.Timestamp
}

// GetStatus returns the value of Status.
func (s *MunroAccessReportStatus) GetStatus() MunroAccessReportStatusStatus {
	return s.Status
}

// GetReport returns the value of Report.
func (s *MunroAccessReportStatus) GetReport() MunroAccessReportMeta {
	return s.Report
}

// SetID sets the value of ID.
func (s *MunroAccessReportStatus) SetID(val string) {
	s.ID = val
}

// SetTimestamp sets the value of Timestamp.
func (s *MunroAccessReportStatus) SetTimestamp(val time.Time) {
	s.Timestamp = val
}

// SetStatus sets the value of Status.
func (s *MunroAccessReportStatus) SetStatus(val MunroAccessReportStatusStatus) {
	s.Status = val
}

// SetReport sets the value of Report.
func (s *MunroAccessReportStatus) SetReport(val MunroAccessReportMeta) {
	s.Report = val
}

type MunroAccessReportStatusStatus string

const (
	MunroAccessReportStatusStatusReceived MunroAccessReportStatusStatus = "received"
	MunroAccessReportStatusStatusWorking  MunroAccessReportStatusStatus = "working"
	MunroAccessReportStatusStatusReady    MunroAccessReportStatusStatus = "ready"
)

// AllValues returns all MunroAccessReportStatusStatus values.
func (MunroAccessReportStatusStatus) AllValues() []MunroAccessReportStatusStatus {
	return []MunroAccessReportStatusStatus{
		MunroAccessReportStatusStatusReceived,
		MunroAccessReportStatusStatusWorking,
		MunroAccessReportStatusStatusReady,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s MunroAccessReportStatusStatus) MarshalText() ([]byte, error) {
	switch s {
	case MunroAccessReportStatusStatusReceived:
		return []byte(s), nil
	case MunroAccessReportStatusStatusWorking:
		return []byte(s), nil
	case MunroAccessReportStatusStatusReady:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *MunroAccessReportStatusStatus) UnmarshalText(data []byte) error {
	switch MunroAccessReportStatusStatus(data) {
	case MunroAccessReportStatusStatusReceived:
		*s = MunroAccessReportStatusStatusReceived
		return nil
	case MunroAccessReportStatusStatusWorking:
		*s = MunroAccessReportStatusStatusWorking
		return nil
	case MunroAccessReportStatusStatusReady:
		*s = MunroAccessReportStatusStatusReady
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type MunroAccessRequestPostOK struct {
	Status MunroAccessReportStatus `json:"status"`
}

// GetStatus returns the value of Status.
func (s *MunroAccessRequestPostOK) GetStatus() MunroAccessReportStatus {
	return s.Status
}

// SetStatus sets the value of Status.
func (s *MunroAccessRequestPostOK) SetStatus(val MunroAccessReportStatus) {
	s.Status = val
}

type MunroAccessRequestPostReq struct {
	FromLabel string    `json:"fromLabel"`
	FromPoint Point     `json:"fromPoint"`
	Date      time.Time `json:"date"`
}

// GetFromLabel returns the value of FromLabel.
func (s *MunroAccessRequestPostReq) GetFromLabel() string {
	return s.FromLabel
}

// GetFromPoint returns the value of FromPoint.
func (s *MunroAccessRequestPostReq) GetFromPoint() Point {
	return s.FromPoint
}

// GetDate returns the value of Date.
func (s *MunroAccessRequestPostReq) GetDate() time.Time {
	return s.Date
}

// SetFromLabel sets the value of FromLabel.
func (s *MunroAccessRequestPostReq) SetFromLabel(val string) {
	s.FromLabel = val
}

// SetFromPoint sets the value of FromPoint.
func (s *MunroAccessRequestPostReq) SetFromPoint(val Point) {
	s.FromPoint = val
}

// SetDate sets the value of Date.
func (s *MunroAccessRequestPostReq) SetDate(val time.Time) {
	s.Date = val
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptImage returns new OptImage with value set to v.
func NewOptImage(v Image) OptImage {
	return OptImage{
		Value: v,
		Set:   true,
	}
}

// OptImage is optional Image.
type OptImage struct {
	Value Image
	Set   bool
}

// IsSet returns true if OptImage was set.
func (o OptImage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptImage) Reset() {
	var v Image
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptImage) SetTo(v Image) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptImage) Get() (v Image, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptImage) Or(d Image) Image {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto returns new OptMunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto with value set to v.
func NewOptMunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto(v MunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto) OptMunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto {
	return OptMunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto{
		Value: v,
		Set:   true,
	}
}

// OptMunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto is optional MunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto.
type OptMunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto struct {
	Value MunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto
	Set   bool
}

// IsSet returns true if OptMunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto was set.
func (o OptMunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto) Reset() {
	var v MunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto) SetTo(v MunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto) Get() (v MunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto) Or(d MunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto) MunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPolyline returns new OptPolyline with value set to v.
func NewOptPolyline(v Polyline) OptPolyline {
	return OptPolyline{
		Value: v,
		Set:   true,
	}
}

// OptPolyline is optional Polyline.
type OptPolyline struct {
	Value Polyline
	Set   bool
}

// IsSet returns true if OptPolyline was set.
func (o OptPolyline) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPolyline) Reset() {
	var v Polyline
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPolyline) SetTo(v Polyline) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPolyline) Get() (v Polyline, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPolyline) Or(d Polyline) Polyline {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSearchResultDebug returns new OptSearchResultDebug with value set to v.
func NewOptSearchResultDebug(v SearchResultDebug) OptSearchResultDebug {
	return OptSearchResultDebug{
		Value: v,
		Set:   true,
	}
}

// OptSearchResultDebug is optional SearchResultDebug.
type OptSearchResultDebug struct {
	Value SearchResultDebug
	Set   bool
}

// IsSet returns true if OptSearchResultDebug was set.
func (o OptSearchResultDebug) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSearchResultDebug) Reset() {
	var v SearchResultDebug
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSearchResultDebug) SetTo(v SearchResultDebug) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSearchResultDebug) Get() (v SearchResultDebug, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSearchResultDebug) Or(d SearchResultDebug) SearchResultDebug {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSetSessionCookieHeader returns new OptSetSessionCookieHeader with value set to v.
func NewOptSetSessionCookieHeader(v SetSessionCookieHeader) OptSetSessionCookieHeader {
	return OptSetSessionCookieHeader{
		Value: v,
		Set:   true,
	}
}

// OptSetSessionCookieHeader is optional SetSessionCookieHeader.
type OptSetSessionCookieHeader struct {
	Value SetSessionCookieHeader
	Set   bool
}

// IsSet returns true if OptSetSessionCookieHeader was set.
func (o OptSetSessionCookieHeader) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSetSessionCookieHeader) Reset() {
	var v SetSessionCookieHeader
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSetSessionCookieHeader) SetTo(v SetSessionCookieHeader) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSetSessionCookieHeader) Get() (v SetSessionCookieHeader, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSetSessionCookieHeader) Or(d SetSessionCookieHeader) SetSessionCookieHeader {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSettingsUnits returns new OptSettingsUnits with value set to v.
func NewOptSettingsUnits(v SettingsUnits) OptSettingsUnits {
	return OptSettingsUnits{
		Value: v,
		Set:   true,
	}
}

// OptSettingsUnits is optional SettingsUnits.
type OptSettingsUnits struct {
	Value SettingsUnits
	Set   bool
}

// IsSet returns true if OptSettingsUnits was set.
func (o OptSettingsUnits) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSettingsUnits) Reset() {
	var v SettingsUnits
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSettingsUnits) SetTo(v SettingsUnits) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSettingsUnits) Get() (v SettingsUnits, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSettingsUnits) Or(d SettingsUnits) SettingsUnits {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTracksGetOrderBy returns new OptTracksGetOrderBy with value set to v.
func NewOptTracksGetOrderBy(v TracksGetOrderBy) OptTracksGetOrderBy {
	return OptTracksGetOrderBy{
		Value: v,
		Set:   true,
	}
}

// OptTracksGetOrderBy is optional TracksGetOrderBy.
type OptTracksGetOrderBy struct {
	Value TracksGetOrderBy
	Set   bool
}

// IsSet returns true if OptTracksGetOrderBy was set.
func (o OptTracksGetOrderBy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTracksGetOrderBy) Reset() {
	var v TracksGetOrderBy
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTracksGetOrderBy) SetTo(v TracksGetOrderBy) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTracksGetOrderBy) Get() (v TracksGetOrderBy, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTracksGetOrderBy) Or(d TracksGetOrderBy) TracksGetOrderBy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptValidationErrors returns new OptValidationErrors with value set to v.
func NewOptValidationErrors(v ValidationErrors) OptValidationErrors {
	return OptValidationErrors{
		Value: v,
		Set:   true,
	}
}

// OptValidationErrors is optional ValidationErrors.
type OptValidationErrors struct {
	Value ValidationErrors
	Set   bool
}

// IsSet returns true if OptValidationErrors was set.
func (o OptValidationErrors) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptValidationErrors) Reset() {
	var v ValidationErrors
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptValidationErrors) SetTo(v ValidationErrors) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptValidationErrors) Get() (v ValidationErrors, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptValidationErrors) Or(d ValidationErrors) ValidationErrors {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptValidationErrorsFieldErrors returns new OptValidationErrorsFieldErrors with value set to v.
func NewOptValidationErrorsFieldErrors(v ValidationErrorsFieldErrors) OptValidationErrorsFieldErrors {
	return OptValidationErrorsFieldErrors{
		Value: v,
		Set:   true,
	}
}

// OptValidationErrorsFieldErrors is optional ValidationErrorsFieldErrors.
type OptValidationErrorsFieldErrors struct {
	Value ValidationErrorsFieldErrors
	Set   bool
}

// IsSet returns true if OptValidationErrorsFieldErrors was set.
func (o OptValidationErrorsFieldErrors) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptValidationErrorsFieldErrors) Reset() {
	var v ValidationErrorsFieldErrors
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptValidationErrorsFieldErrors) SetTo(v ValidationErrorsFieldErrors) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptValidationErrorsFieldErrors) Get() (v ValidationErrorsFieldErrors, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptValidationErrorsFieldErrors) Or(d ValidationErrorsFieldErrors) ValidationErrorsFieldErrors {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type Point []float64

type Polyline string

// Ref: #/components/schemas/SearchResult
type SearchResult struct {
	ID           string               `json:"id"`
	Name         string               `json:"name"`
	Type         SearchResultType     `json:"type"`
	CountryCode2 string               `json:"countryCode2"`
	Geometry     Geometry             `json:"geometry"`
	Debug        OptSearchResultDebug `json:"debug"`
}

// GetID returns the value of ID.
func (s *SearchResult) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *SearchResult) GetName() string {
	return s.Name
}

// GetType returns the value of Type.
func (s *SearchResult) GetType() SearchResultType {
	return s.Type
}

// GetCountryCode2 returns the value of CountryCode2.
func (s *SearchResult) GetCountryCode2() string {
	return s.CountryCode2
}

// GetGeometry returns the value of Geometry.
func (s *SearchResult) GetGeometry() Geometry {
	return s.Geometry
}

// GetDebug returns the value of Debug.
func (s *SearchResult) GetDebug() OptSearchResultDebug {
	return s.Debug
}

// SetID sets the value of ID.
func (s *SearchResult) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *SearchResult) SetName(val string) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *SearchResult) SetType(val SearchResultType) {
	s.Type = val
}

// SetCountryCode2 sets the value of CountryCode2.
func (s *SearchResult) SetCountryCode2(val string) {
	s.CountryCode2 = val
}

// SetGeometry sets the value of Geometry.
func (s *SearchResult) SetGeometry(val Geometry) {
	s.Geometry = val
}

// SetDebug sets the value of Debug.
func (s *SearchResult) SetDebug(val OptSearchResultDebug) {
	s.Debug = val
}

type SearchResultDebug map[string]jx.Raw

func (s *SearchResultDebug) init() SearchResultDebug {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type SearchResultType string

const (
	SearchResultTypePostcode       SearchResultType = "postcode"
	SearchResultTypeHill           SearchResultType = "hill"
	SearchResultTypeStreet         SearchResultType = "street"
	SearchResultTypePopulatedPlace SearchResultType = "populated_place"
	SearchResultTypeWaterBody      SearchResultType = "water_body"
	SearchResultTypeOther          SearchResultType = "other"
)

// AllValues returns all SearchResultType values.
func (SearchResultType) AllValues() []SearchResultType {
	return []SearchResultType{
		SearchResultTypePostcode,
		SearchResultTypeHill,
		SearchResultTypeStreet,
		SearchResultTypePopulatedPlace,
		SearchResultTypeWaterBody,
		SearchResultTypeOther,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SearchResultType) MarshalText() ([]byte, error) {
	switch s {
	case SearchResultTypePostcode:
		return []byte(s), nil
	case SearchResultTypeHill:
		return []byte(s), nil
	case SearchResultTypeStreet:
		return []byte(s), nil
	case SearchResultTypePopulatedPlace:
		return []byte(s), nil
	case SearchResultTypeWaterBody:
		return []byte(s), nil
	case SearchResultTypeOther:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SearchResultType) UnmarshalText(data []byte) error {
	switch SearchResultType(data) {
	case SearchResultTypePostcode:
		*s = SearchResultTypePostcode
		return nil
	case SearchResultTypeHill:
		*s = SearchResultTypeHill
		return nil
	case SearchResultTypeStreet:
		*s = SearchResultTypeStreet
		return nil
	case SearchResultTypePopulatedPlace:
		*s = SearchResultTypePopulatedPlace
		return nil
	case SearchResultTypeWaterBody:
		*s = SearchResultTypeWaterBody
		return nil
	case SearchResultTypeOther:
		*s = SearchResultTypeOther
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type SetSessionCookieHeader string

// Ref: #/components/schemas/Settings
type Settings struct {
	Units OptSettingsUnits `json:"units"`
}

// GetUnits returns the value of Units.
func (s *Settings) GetUnits() OptSettingsUnits {
	return s.Units
}

// SetUnits sets the value of Units.
func (s *Settings) SetUnits(val OptSettingsUnits) {
	s.Units = val
}

type SettingsGetOK struct {
	Settings Settings `json:"settings"`
}

// GetSettings returns the value of Settings.
func (s *SettingsGetOK) GetSettings() Settings {
	return s.Settings
}

// SetSettings sets the value of Settings.
func (s *SettingsGetOK) SetSettings(val Settings) {
	s.Settings = val
}

type SettingsPutOK struct {
	Settings Settings `json:"settings"`
}

// GetSettings returns the value of Settings.
func (s *SettingsPutOK) GetSettings() Settings {
	return s.Settings
}

// SetSettings sets the value of Settings.
func (s *SettingsPutOK) SetSettings(val Settings) {
	s.Settings = val
}

type SettingsPutReq struct {
	Settings Settings `json:"settings"`
}

// GetSettings returns the value of Settings.
func (s *SettingsPutReq) GetSettings() Settings {
	return s.Settings
}

// SetSettings sets the value of Settings.
func (s *SettingsPutReq) SetSettings(val Settings) {
	s.Settings = val
}

type SettingsUnits string

const (
	SettingsUnitsMetric    SettingsUnits = "metric"
	SettingsUnitsCustomary SettingsUnits = "customary"
)

// AllValues returns all SettingsUnits values.
func (SettingsUnits) AllValues() []SettingsUnits {
	return []SettingsUnits{
		SettingsUnitsMetric,
		SettingsUnitsCustomary,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SettingsUnits) MarshalText() ([]byte, error) {
	switch s {
	case SettingsUnitsMetric:
		return []byte(s), nil
	case SettingsUnitsCustomary:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SettingsUnits) UnmarshalText(data []byte) error {
	switch SettingsUnits(data) {
	case SettingsUnitsMetric:
		*s = SettingsUnitsMetric
		return nil
	case SettingsUnitsCustomary:
		*s = SettingsUnitsCustomary
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type Token string

// Ref: #/components/schemas/Track
type Track struct {
	ID            string      `json:"id"`
	OwnerID       string      `json:"ownerID"`
	Name          OptString   `json:"name"`
	DescriptionMd OptString   `json:"descriptionMd"`
	Date          time.Time   `json:"date"`
	DateUploaded  time.Time   `json:"dateUploaded"`
	LengthMeters  float64     `json:"lengthMeters"`
	DurationSecs  OptInt      `json:"durationSecs"`
	Times         []time.Time `json:"times"`
	Line          Polyline    `json:"line"`
}

// GetID returns the value of ID.
func (s *Track) GetID() string {
	return s.ID
}

// GetOwnerID returns the value of OwnerID.
func (s *Track) GetOwnerID() string {
	return s.OwnerID
}

// GetName returns the value of Name.
func (s *Track) GetName() OptString {
	return s.Name
}

// GetDescriptionMd returns the value of DescriptionMd.
func (s *Track) GetDescriptionMd() OptString {
	return s.DescriptionMd
}

// GetDate returns the value of Date.
func (s *Track) GetDate() time.Time {
	return s.Date
}

// GetDateUploaded returns the value of DateUploaded.
func (s *Track) GetDateUploaded() time.Time {
	return s.DateUploaded
}

// GetLengthMeters returns the value of LengthMeters.
func (s *Track) GetLengthMeters() float64 {
	return s.LengthMeters
}

// GetDurationSecs returns the value of DurationSecs.
func (s *Track) GetDurationSecs() OptInt {
	return s.DurationSecs
}

// GetTimes returns the value of Times.
func (s *Track) GetTimes() []time.Time {
	return s.Times
}

// GetLine returns the value of Line.
func (s *Track) GetLine() Polyline {
	return s.Line
}

// SetID sets the value of ID.
func (s *Track) SetID(val string) {
	s.ID = val
}

// SetOwnerID sets the value of OwnerID.
func (s *Track) SetOwnerID(val string) {
	s.OwnerID = val
}

// SetName sets the value of Name.
func (s *Track) SetName(val OptString) {
	s.Name = val
}

// SetDescriptionMd sets the value of DescriptionMd.
func (s *Track) SetDescriptionMd(val OptString) {
	s.DescriptionMd = val
}

// SetDate sets the value of Date.
func (s *Track) SetDate(val time.Time) {
	s.Date = val
}

// SetDateUploaded sets the value of DateUploaded.
func (s *Track) SetDateUploaded(val time.Time) {
	s.DateUploaded = val
}

// SetLengthMeters sets the value of LengthMeters.
func (s *Track) SetLengthMeters(val float64) {
	s.LengthMeters = val
}

// SetDurationSecs sets the value of DurationSecs.
func (s *Track) SetDurationSecs(val OptInt) {
	s.DurationSecs = val
}

// SetTimes sets the value of Times.
func (s *Track) SetTimes(val []time.Time) {
	s.Times = val
}

// SetLine sets the value of Line.
func (s *Track) SetLine(val Polyline) {
	s.Line = val
}

// Ref: #/components/schemas/TrackCreate
type TrackCreate struct {
	Name          OptString   `json:"name"`
	DescriptionMd OptString   `json:"descriptionMd"`
	Date          time.Time   `json:"date"`
	Times         []time.Time `json:"times"`
	Line          Polyline    `json:"line"`
}

// GetName returns the value of Name.
func (s *TrackCreate) GetName() OptString {
	return s.Name
}

// GetDescriptionMd returns the value of DescriptionMd.
func (s *TrackCreate) GetDescriptionMd() OptString {
	return s.DescriptionMd
}

// GetDate returns the value of Date.
func (s *TrackCreate) GetDate() time.Time {
	return s.Date
}

// GetTimes returns the value of Times.
func (s *TrackCreate) GetTimes() []time.Time {
	return s.Times
}

// GetLine returns the value of Line.
func (s *TrackCreate) GetLine() Polyline {
	return s.Line
}

// SetName sets the value of Name.
func (s *TrackCreate) SetName(val OptString) {
	s.Name = val
}

// SetDescriptionMd sets the value of DescriptionMd.
func (s *TrackCreate) SetDescriptionMd(val OptString) {
	s.DescriptionMd = val
}

// SetDate sets the value of Date.
func (s *TrackCreate) SetDate(val time.Time) {
	s.Date = val
}

// SetTimes sets the value of Times.
func (s *TrackCreate) SetTimes(val []time.Time) {
	s.Times = val
}

// SetLine sets the value of Line.
func (s *TrackCreate) SetLine(val Polyline) {
	s.Line = val
}

// Ref: #/components/schemas/TrackSummary
type TrackSummary struct {
	ID             string    `json:"id"`
	OwnerID        string    `json:"ownerID"`
	Name           OptString `json:"name"`
	DescriptionMd  OptString `json:"descriptionMd"`
	Date           time.Time `json:"date"`
	DateUploaded   time.Time `json:"dateUploaded"`
	LengthMeters   float64   `json:"lengthMeters"`
	DurationSecs   OptInt    `json:"durationSecs"`
	SimplifiedLine Polyline  `json:"simplifiedLine"`
}

// GetID returns the value of ID.
func (s *TrackSummary) GetID() string {
	return s.ID
}

// GetOwnerID returns the value of OwnerID.
func (s *TrackSummary) GetOwnerID() string {
	return s.OwnerID
}

// GetName returns the value of Name.
func (s *TrackSummary) GetName() OptString {
	return s.Name
}

// GetDescriptionMd returns the value of DescriptionMd.
func (s *TrackSummary) GetDescriptionMd() OptString {
	return s.DescriptionMd
}

// GetDate returns the value of Date.
func (s *TrackSummary) GetDate() time.Time {
	return s.Date
}

// GetDateUploaded returns the value of DateUploaded.
func (s *TrackSummary) GetDateUploaded() time.Time {
	return s.DateUploaded
}

// GetLengthMeters returns the value of LengthMeters.
func (s *TrackSummary) GetLengthMeters() float64 {
	return s.LengthMeters
}

// GetDurationSecs returns the value of DurationSecs.
func (s *TrackSummary) GetDurationSecs() OptInt {
	return s.DurationSecs
}

// GetSimplifiedLine returns the value of SimplifiedLine.
func (s *TrackSummary) GetSimplifiedLine() Polyline {
	return s.SimplifiedLine
}

// SetID sets the value of ID.
func (s *TrackSummary) SetID(val string) {
	s.ID = val
}

// SetOwnerID sets the value of OwnerID.
func (s *TrackSummary) SetOwnerID(val string) {
	s.OwnerID = val
}

// SetName sets the value of Name.
func (s *TrackSummary) SetName(val OptString) {
	s.Name = val
}

// SetDescriptionMd sets the value of DescriptionMd.
func (s *TrackSummary) SetDescriptionMd(val OptString) {
	s.DescriptionMd = val
}

// SetDate sets the value of Date.
func (s *TrackSummary) SetDate(val time.Time) {
	s.Date = val
}

// SetDateUploaded sets the value of DateUploaded.
func (s *TrackSummary) SetDateUploaded(val time.Time) {
	s.DateUploaded = val
}

// SetLengthMeters sets the value of LengthMeters.
func (s *TrackSummary) SetLengthMeters(val float64) {
	s.LengthMeters = val
}

// SetDurationSecs sets the value of DurationSecs.
func (s *TrackSummary) SetDurationSecs(val OptInt) {
	s.DurationSecs = val
}

// SetSimplifiedLine sets the value of SimplifiedLine.
func (s *TrackSummary) SetSimplifiedLine(val Polyline) {
	s.SimplifiedLine = val
}

// Ref: #/components/schemas/TrackUpdate
type TrackUpdate struct {
	Name          OptString   `json:"name"`
	DescriptionMd OptString   `json:"descriptionMd"`
	Date          OptDateTime `json:"date"`
	Times         []time.Time `json:"times"`
	Line          OptPolyline `json:"line"`
}

// GetName returns the value of Name.
func (s *TrackUpdate) GetName() OptString {
	return s.Name
}

// GetDescriptionMd returns the value of DescriptionMd.
func (s *TrackUpdate) GetDescriptionMd() OptString {
	return s.DescriptionMd
}

// GetDate returns the value of Date.
func (s *TrackUpdate) GetDate() OptDateTime {
	return s.Date
}

// GetTimes returns the value of Times.
func (s *TrackUpdate) GetTimes() []time.Time {
	return s.Times
}

// GetLine returns the value of Line.
func (s *TrackUpdate) GetLine() OptPolyline {
	return s.Line
}

// SetName sets the value of Name.
func (s *TrackUpdate) SetName(val OptString) {
	s.Name = val
}

// SetDescriptionMd sets the value of DescriptionMd.
func (s *TrackUpdate) SetDescriptionMd(val OptString) {
	s.DescriptionMd = val
}

// SetDate sets the value of Date.
func (s *TrackUpdate) SetDate(val OptDateTime) {
	s.Date = val
}

// SetTimes sets the value of Times.
func (s *TrackUpdate) SetTimes(val []time.Time) {
	s.Times = val
}

// SetLine sets the value of Line.
func (s *TrackUpdate) SetLine(val OptPolyline) {
	s.Line = val
}

type TracksGetOK struct {
	Page    int            `json:"page"`
	PerPage int            `json:"perPage"`
	Pages   int            `json:"pages"`
	Total   int            `json:"total"`
	Tracks  []TrackSummary `json:"tracks"`
}

// GetPage returns the value of Page.
func (s *TracksGetOK) GetPage() int {
	return s.Page
}

// GetPerPage returns the value of PerPage.
func (s *TracksGetOK) GetPerPage() int {
	return s.PerPage
}

// GetPages returns the value of Pages.
func (s *TracksGetOK) GetPages() int {
	return s.Pages
}

// GetTotal returns the value of Total.
func (s *TracksGetOK) GetTotal() int {
	return s.Total
}

// GetTracks returns the value of Tracks.
func (s *TracksGetOK) GetTracks() []TrackSummary {
	return s.Tracks
}

// SetPage sets the value of Page.
func (s *TracksGetOK) SetPage(val int) {
	s.Page = val
}

// SetPerPage sets the value of PerPage.
func (s *TracksGetOK) SetPerPage(val int) {
	s.PerPage = val
}

// SetPages sets the value of Pages.
func (s *TracksGetOK) SetPages(val int) {
	s.Pages = val
}

// SetTotal sets the value of Total.
func (s *TracksGetOK) SetTotal(val int) {
	s.Total = val
}

// SetTracks sets the value of Tracks.
func (s *TracksGetOK) SetTracks(val []TrackSummary) {
	s.Tracks = val
}

type TracksGetOrderBy string

const (
	TracksGetOrderByName             TracksGetOrderBy = "name"
	TracksGetOrderByDateAsc          TracksGetOrderBy = "dateAsc"
	TracksGetOrderByDateDesc         TracksGetOrderBy = "dateDesc"
	TracksGetOrderByDateUploadedAsc  TracksGetOrderBy = "dateUploadedAsc"
	TracksGetOrderByDateUploadedDesc TracksGetOrderBy = "dateUploadedDesc"
)

// AllValues returns all TracksGetOrderBy values.
func (TracksGetOrderBy) AllValues() []TracksGetOrderBy {
	return []TracksGetOrderBy{
		TracksGetOrderByName,
		TracksGetOrderByDateAsc,
		TracksGetOrderByDateDesc,
		TracksGetOrderByDateUploadedAsc,
		TracksGetOrderByDateUploadedDesc,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TracksGetOrderBy) MarshalText() ([]byte, error) {
	switch s {
	case TracksGetOrderByName:
		return []byte(s), nil
	case TracksGetOrderByDateAsc:
		return []byte(s), nil
	case TracksGetOrderByDateDesc:
		return []byte(s), nil
	case TracksGetOrderByDateUploadedAsc:
		return []byte(s), nil
	case TracksGetOrderByDateUploadedDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TracksGetOrderBy) UnmarshalText(data []byte) error {
	switch TracksGetOrderBy(data) {
	case TracksGetOrderByName:
		*s = TracksGetOrderByName
		return nil
	case TracksGetOrderByDateAsc:
		*s = TracksGetOrderByDateAsc
		return nil
	case TracksGetOrderByDateDesc:
		*s = TracksGetOrderByDateDesc
		return nil
	case TracksGetOrderByDateUploadedAsc:
		*s = TracksGetOrderByDateUploadedAsc
		return nil
	case TracksGetOrderByDateUploadedDesc:
		*s = TracksGetOrderByDateUploadedDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type TracksPostOK struct {
	Tracks []Track `json:"tracks"`
}

// GetTracks returns the value of Tracks.
func (s *TracksPostOK) GetTracks() []Track {
	return s.Tracks
}

// SetTracks sets the value of Tracks.
func (s *TracksPostOK) SetTracks(val []Track) {
	s.Tracks = val
}

type TracksPostReq struct {
	Tracks []TrackCreate `json:"tracks"`
}

// GetTracks returns the value of Tracks.
func (s *TracksPostReq) GetTracks() []TrackCreate {
	return s.Tracks
}

// SetTracks sets the value of Tracks.
func (s *TracksPostReq) SetTracks(val []TrackCreate) {
	s.Tracks = val
}

type TracksTrackIDDeleteOK struct{}

type TracksTrackIDGetOK struct {
	Track Track `json:"track"`
}

// GetTrack returns the value of Track.
func (s *TracksTrackIDGetOK) GetTrack() Track {
	return s.Track
}

// SetTrack sets the value of Track.
func (s *TracksTrackIDGetOK) SetTrack(val Track) {
	s.Track = val
}

type TracksTrackIDPatchOK struct {
	Track Track `json:"track"`
}

// GetTrack returns the value of Track.
func (s *TracksTrackIDPatchOK) GetTrack() Track {
	return s.Track
}

// SetTrack sets the value of Track.
func (s *TracksTrackIDPatchOK) SetTrack(val Track) {
	s.Track = val
}

type TracksTrackIDPatchReq struct {
	Track TrackUpdate `json:"track"`
}

// GetTrack returns the value of Track.
func (s *TracksTrackIDPatchReq) GetTrack() TrackUpdate {
	return s.Track
}

// SetTrack sets the value of Track.
func (s *TracksTrackIDPatchReq) SetTrack(val TrackUpdate) {
	s.Track = val
}

// Ref: #/components/schemas/User
type User struct {
	ID             UserID    `json:"id"`
	Name           OptString `json:"name"`
	Email          string    `json:"email"`
	EmailConfirmed OptBool   `json:"emailConfirmed"`
}

// GetID returns the value of ID.
func (s *User) GetID() UserID {
	return s.ID
}

// GetName returns the value of Name.
func (s *User) GetName() OptString {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *User) GetEmail() string {
	return s.Email
}

// GetEmailConfirmed returns the value of EmailConfirmed.
func (s *User) GetEmailConfirmed() OptBool {
	return s.EmailConfirmed
}

// SetID sets the value of ID.
func (s *User) SetID(val UserID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *User) SetName(val OptString) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *User) SetEmail(val string) {
	s.Email = val
}

// SetEmailConfirmed sets the value of EmailConfirmed.
func (s *User) SetEmailConfirmed(val OptBool) {
	s.EmailConfirmed = val
}

type UserID string

// Ref: #/components/schemas/ValidationErrors
type ValidationErrors struct {
	GeneralErrors []string                       `json:"generalErrors"`
	FieldErrors   OptValidationErrorsFieldErrors `json:"fieldErrors"`
}

// GetGeneralErrors returns the value of GeneralErrors.
func (s *ValidationErrors) GetGeneralErrors() []string {
	return s.GeneralErrors
}

// GetFieldErrors returns the value of FieldErrors.
func (s *ValidationErrors) GetFieldErrors() OptValidationErrorsFieldErrors {
	return s.FieldErrors
}

// SetGeneralErrors sets the value of GeneralErrors.
func (s *ValidationErrors) SetGeneralErrors(val []string) {
	s.GeneralErrors = val
}

// SetFieldErrors sets the value of FieldErrors.
func (s *ValidationErrors) SetFieldErrors(val OptValidationErrorsFieldErrors) {
	s.FieldErrors = val
}

type ValidationErrorsFieldErrors map[string]string

func (s *ValidationErrorsFieldErrors) init() ValidationErrorsFieldErrors {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type WeatherShortUkGetOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s WeatherShortUkGetOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}
