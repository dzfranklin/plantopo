// Code generated by ogen, DO NOT EDIT.

package papi

import (
	"fmt"
	"io"
	"time"

	"github.com/go-faster/errors"
)

func (s *DefaultErrorResponseStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

type AuthCheckPostOK struct {
	UserID UserID `json:"userID"`
}

// GetUserID returns the value of UserID.
func (s *AuthCheckPostOK) GetUserID() UserID {
	return s.UserID
}

// SetUserID sets the value of UserID.
func (s *AuthCheckPostOK) SetUserID(val UserID) {
	s.UserID = val
}

// Ref: #/components/schemas/AuthRegisterRequest
type AuthRegisterRequest struct {
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

// GetName returns the value of Name.
func (s *AuthRegisterRequest) GetName() string {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *AuthRegisterRequest) GetEmail() string {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *AuthRegisterRequest) GetPassword() string {
	return s.Password
}

// SetName sets the value of Name.
func (s *AuthRegisterRequest) SetName(val string) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *AuthRegisterRequest) SetEmail(val string) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *AuthRegisterRequest) SetPassword(val string) {
	s.Password = val
}

type AuthRevokeBrowserPostOK struct{}

// AuthRevokeBrowserPostOKHeaders wraps AuthRevokeBrowserPostOK with response headers.
type AuthRevokeBrowserPostOKHeaders struct {
	SetCookie OptString
	Response  AuthRevokeBrowserPostOK
}

// GetSetCookie returns the value of SetCookie.
func (s *AuthRevokeBrowserPostOKHeaders) GetSetCookie() OptString {
	return s.SetCookie
}

// GetResponse returns the value of Response.
func (s *AuthRevokeBrowserPostOKHeaders) GetResponse() AuthRevokeBrowserPostOK {
	return s.Response
}

// SetSetCookie sets the value of SetCookie.
func (s *AuthRevokeBrowserPostOKHeaders) SetSetCookie(val OptString) {
	s.SetCookie = val
}

// SetResponse sets the value of Response.
func (s *AuthRevokeBrowserPostOKHeaders) SetResponse(val AuthRevokeBrowserPostOK) {
	s.Response = val
}

type AuthRevokePostOK struct{}

// Ref: #/components/schemas/AuthRevokeReq
type AuthRevokeReq struct {
	Token Token `json:"token"`
}

// GetToken returns the value of Token.
func (s *AuthRevokeReq) GetToken() Token {
	return s.Token
}

// SetToken sets the value of Token.
func (s *AuthRevokeReq) SetToken(val Token) {
	s.Token = val
}

// Ref: #/components/schemas/AuthenticateBrowserOK
type AuthenticateBrowserOK struct {
	User User `json:"user"`
}

// GetUser returns the value of User.
func (s *AuthenticateBrowserOK) GetUser() User {
	return s.User
}

// SetUser sets the value of User.
func (s *AuthenticateBrowserOK) SetUser(val User) {
	s.User = val
}

// AuthenticateBrowserOKHeaders wraps AuthenticateBrowserOK with response headers.
type AuthenticateBrowserOKHeaders struct {
	SetCookie OptSetSessionCookieHeader
	Response  AuthenticateBrowserOK
}

// GetSetCookie returns the value of SetCookie.
func (s *AuthenticateBrowserOKHeaders) GetSetCookie() OptSetSessionCookieHeader {
	return s.SetCookie
}

// GetResponse returns the value of Response.
func (s *AuthenticateBrowserOKHeaders) GetResponse() AuthenticateBrowserOK {
	return s.Response
}

// SetSetCookie sets the value of SetCookie.
func (s *AuthenticateBrowserOKHeaders) SetSetCookie(val OptSetSessionCookieHeader) {
	s.SetCookie = val
}

// SetResponse sets the value of Response.
func (s *AuthenticateBrowserOKHeaders) SetResponse(val AuthenticateBrowserOK) {
	s.Response = val
}

// Ref: #/components/schemas/AuthenticateOK
type AuthenticateOK struct {
	Token Token `json:"token"`
	User  User  `json:"user"`
}

// GetToken returns the value of Token.
func (s *AuthenticateOK) GetToken() Token {
	return s.Token
}

// GetUser returns the value of User.
func (s *AuthenticateOK) GetUser() User {
	return s.User
}

// SetToken sets the value of Token.
func (s *AuthenticateOK) SetToken(val Token) {
	s.Token = val
}

// SetUser sets the value of User.
func (s *AuthenticateOK) SetUser(val User) {
	s.User = val
}

// Ref: #/components/schemas/AuthenticateReq
type AuthenticateReq struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// GetEmail returns the value of Email.
func (s *AuthenticateReq) GetEmail() string {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *AuthenticateReq) GetPassword() string {
	return s.Password
}

// SetEmail sets the value of Email.
func (s *AuthenticateReq) SetEmail(val string) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *AuthenticateReq) SetPassword(val string) {
	s.Password = val
}

type Bearer struct {
	Token string
}

// GetToken returns the value of Token.
func (s *Bearer) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *Bearer) SetToken(val string) {
	s.Token = val
}

type Browser struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *Browser) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *Browser) SetAPIKey(val string) {
	s.APIKey = val
}

// Ref: #/components/schemas/DefaultError
type DefaultError struct {
	Message           string              `json:"message"`
	RetryAfterSeconds OptInt              `json:"retryAfterSeconds"`
	ValidationErrors  OptValidationErrors `json:"validationErrors"`
}

// GetMessage returns the value of Message.
func (s *DefaultError) GetMessage() string {
	return s.Message
}

// GetRetryAfterSeconds returns the value of RetryAfterSeconds.
func (s *DefaultError) GetRetryAfterSeconds() OptInt {
	return s.RetryAfterSeconds
}

// GetValidationErrors returns the value of ValidationErrors.
func (s *DefaultError) GetValidationErrors() OptValidationErrors {
	return s.ValidationErrors
}

// SetMessage sets the value of Message.
func (s *DefaultError) SetMessage(val string) {
	s.Message = val
}

// SetRetryAfterSeconds sets the value of RetryAfterSeconds.
func (s *DefaultError) SetRetryAfterSeconds(val OptInt) {
	s.RetryAfterSeconds = val
}

// SetValidationErrors sets the value of ValidationErrors.
func (s *DefaultError) SetValidationErrors(val OptValidationErrors) {
	s.ValidationErrors = val
}

// DefaultErrorResponseStatusCode wraps DefaultError with StatusCode.
type DefaultErrorResponseStatusCode struct {
	StatusCode int
	Response   DefaultError
}

// GetStatusCode returns the value of StatusCode.
func (s *DefaultErrorResponseStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *DefaultErrorResponseStatusCode) GetResponse() DefaultError {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *DefaultErrorResponseStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *DefaultErrorResponseStatusCode) SetResponse(val DefaultError) {
	s.Response = val
}

// Ref: #/components/schemas/ElevationPostOK
type ElevationPostOK struct {
	Elevation []float64 `json:"elevation"`
}

// GetElevation returns the value of Elevation.
func (s *ElevationPostOK) GetElevation() []float64 {
	return s.Elevation
}

// SetElevation sets the value of Elevation.
func (s *ElevationPostOK) SetElevation(val []float64) {
	s.Elevation = val
}

// Ref: #/components/schemas/ElevationPostReq
type ElevationPostReq struct {
	Coordinates [][]float64 `json:"coordinates"`
}

// GetCoordinates returns the value of Coordinates.
func (s *ElevationPostReq) GetCoordinates() [][]float64 {
	return s.Coordinates
}

// SetCoordinates sets the value of Coordinates.
func (s *ElevationPostReq) SetCoordinates(val [][]float64) {
	s.Coordinates = val
}

type MunroAccessMunrosGetOK struct {
	Munros MunroAccessMunrosGetOKMunros `json:"munros"`
}

// GetMunros returns the value of Munros.
func (s *MunroAccessMunrosGetOK) GetMunros() MunroAccessMunrosGetOKMunros {
	return s.Munros
}

// SetMunros sets the value of Munros.
func (s *MunroAccessMunrosGetOK) SetMunros(val MunroAccessMunrosGetOKMunros) {
	s.Munros = val
}

type MunroAccessMunrosGetOKMunros struct {
	Type     MunroAccessMunrosGetOKMunrosType           `json:"type"`
	Features []MunroAccessMunrosGetOKMunrosFeaturesItem `json:"features"`
}

// GetType returns the value of Type.
func (s *MunroAccessMunrosGetOKMunros) GetType() MunroAccessMunrosGetOKMunrosType {
	return s.Type
}

// GetFeatures returns the value of Features.
func (s *MunroAccessMunrosGetOKMunros) GetFeatures() []MunroAccessMunrosGetOKMunrosFeaturesItem {
	return s.Features
}

// SetType sets the value of Type.
func (s *MunroAccessMunrosGetOKMunros) SetType(val MunroAccessMunrosGetOKMunrosType) {
	s.Type = val
}

// SetFeatures sets the value of Features.
func (s *MunroAccessMunrosGetOKMunros) SetFeatures(val []MunroAccessMunrosGetOKMunrosFeaturesItem) {
	s.Features = val
}

type MunroAccessMunrosGetOKMunrosFeaturesItem struct {
	Type       MunroAccessMunrosGetOKMunrosFeaturesItemType       `json:"type"`
	ID         int                                                `json:"id"`
	Properties MunroAccessMunrosGetOKMunrosFeaturesItemProperties `json:"properties"`
	Geometry   MunroAccessMunrosGetOKMunrosFeaturesItemGeometry   `json:"geometry"`
}

// GetType returns the value of Type.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItem) GetType() MunroAccessMunrosGetOKMunrosFeaturesItemType {
	return s.Type
}

// GetID returns the value of ID.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItem) GetID() int {
	return s.ID
}

// GetProperties returns the value of Properties.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItem) GetProperties() MunroAccessMunrosGetOKMunrosFeaturesItemProperties {
	return s.Properties
}

// GetGeometry returns the value of Geometry.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItem) GetGeometry() MunroAccessMunrosGetOKMunrosFeaturesItemGeometry {
	return s.Geometry
}

// SetType sets the value of Type.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItem) SetType(val MunroAccessMunrosGetOKMunrosFeaturesItemType) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItem) SetID(val int) {
	s.ID = val
}

// SetProperties sets the value of Properties.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItem) SetProperties(val MunroAccessMunrosGetOKMunrosFeaturesItemProperties) {
	s.Properties = val
}

// SetGeometry sets the value of Geometry.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItem) SetGeometry(val MunroAccessMunrosGetOKMunrosFeaturesItemGeometry) {
	s.Geometry = val
}

type MunroAccessMunrosGetOKMunrosFeaturesItemGeometry struct {
	Type        MunroAccessMunrosGetOKMunrosFeaturesItemGeometryType `json:"type"`
	Coordinates []float64                                            `json:"coordinates"`
}

// GetType returns the value of Type.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemGeometry) GetType() MunroAccessMunrosGetOKMunrosFeaturesItemGeometryType {
	return s.Type
}

// GetCoordinates returns the value of Coordinates.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemGeometry) GetCoordinates() []float64 {
	return s.Coordinates
}

// SetType sets the value of Type.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemGeometry) SetType(val MunroAccessMunrosGetOKMunrosFeaturesItemGeometryType) {
	s.Type = val
}

// SetCoordinates sets the value of Coordinates.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemGeometry) SetCoordinates(val []float64) {
	s.Coordinates = val
}

type MunroAccessMunrosGetOKMunrosFeaturesItemGeometryType string

const (
	MunroAccessMunrosGetOKMunrosFeaturesItemGeometryTypePoint MunroAccessMunrosGetOKMunrosFeaturesItemGeometryType = "Point"
)

// AllValues returns all MunroAccessMunrosGetOKMunrosFeaturesItemGeometryType values.
func (MunroAccessMunrosGetOKMunrosFeaturesItemGeometryType) AllValues() []MunroAccessMunrosGetOKMunrosFeaturesItemGeometryType {
	return []MunroAccessMunrosGetOKMunrosFeaturesItemGeometryType{
		MunroAccessMunrosGetOKMunrosFeaturesItemGeometryTypePoint,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s MunroAccessMunrosGetOKMunrosFeaturesItemGeometryType) MarshalText() ([]byte, error) {
	switch s {
	case MunroAccessMunrosGetOKMunrosFeaturesItemGeometryTypePoint:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemGeometryType) UnmarshalText(data []byte) error {
	switch MunroAccessMunrosGetOKMunrosFeaturesItemGeometryType(data) {
	case MunroAccessMunrosGetOKMunrosFeaturesItemGeometryTypePoint:
		*s = MunroAccessMunrosGetOKMunrosFeaturesItemGeometryTypePoint
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type MunroAccessMunrosGetOKMunrosFeaturesItemProperties struct {
	Name   string                                                     `json:"name"`
	Meters float64                                                    `json:"meters"`
	Photo  OptMunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto `json:"photo"`
}

// GetName returns the value of Name.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemProperties) GetName() string {
	return s.Name
}

// GetMeters returns the value of Meters.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemProperties) GetMeters() float64 {
	return s.Meters
}

// GetPhoto returns the value of Photo.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemProperties) GetPhoto() OptMunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto {
	return s.Photo
}

// SetName sets the value of Name.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemProperties) SetName(val string) {
	s.Name = val
}

// SetMeters sets the value of Meters.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemProperties) SetMeters(val float64) {
	s.Meters = val
}

// SetPhoto sets the value of Photo.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemProperties) SetPhoto(val OptMunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto) {
	s.Photo = val
}

type MunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto struct {
	Source     string    `json:"source"`
	Width      int       `json:"width"`
	Height     int       `json:"height"`
	Author     OptString `json:"author"`
	SourceText OptString `json:"sourceText"`
	SourceLink OptString `json:"sourceLink"`
}

// GetSource returns the value of Source.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto) GetSource() string {
	return s.Source
}

// GetWidth returns the value of Width.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto) GetWidth() int {
	return s.Width
}

// GetHeight returns the value of Height.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto) GetHeight() int {
	return s.Height
}

// GetAuthor returns the value of Author.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto) GetAuthor() OptString {
	return s.Author
}

// GetSourceText returns the value of SourceText.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto) GetSourceText() OptString {
	return s.SourceText
}

// GetSourceLink returns the value of SourceLink.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto) GetSourceLink() OptString {
	return s.SourceLink
}

// SetSource sets the value of Source.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto) SetSource(val string) {
	s.Source = val
}

// SetWidth sets the value of Width.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto) SetWidth(val int) {
	s.Width = val
}

// SetHeight sets the value of Height.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto) SetHeight(val int) {
	s.Height = val
}

// SetAuthor sets the value of Author.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto) SetAuthor(val OptString) {
	s.Author = val
}

// SetSourceText sets the value of SourceText.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto) SetSourceText(val OptString) {
	s.SourceText = val
}

// SetSourceLink sets the value of SourceLink.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto) SetSourceLink(val OptString) {
	s.SourceLink = val
}

type MunroAccessMunrosGetOKMunrosFeaturesItemType string

const (
	MunroAccessMunrosGetOKMunrosFeaturesItemTypeFeature MunroAccessMunrosGetOKMunrosFeaturesItemType = "Feature"
)

// AllValues returns all MunroAccessMunrosGetOKMunrosFeaturesItemType values.
func (MunroAccessMunrosGetOKMunrosFeaturesItemType) AllValues() []MunroAccessMunrosGetOKMunrosFeaturesItemType {
	return []MunroAccessMunrosGetOKMunrosFeaturesItemType{
		MunroAccessMunrosGetOKMunrosFeaturesItemTypeFeature,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s MunroAccessMunrosGetOKMunrosFeaturesItemType) MarshalText() ([]byte, error) {
	switch s {
	case MunroAccessMunrosGetOKMunrosFeaturesItemTypeFeature:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *MunroAccessMunrosGetOKMunrosFeaturesItemType) UnmarshalText(data []byte) error {
	switch MunroAccessMunrosGetOKMunrosFeaturesItemType(data) {
	case MunroAccessMunrosGetOKMunrosFeaturesItemTypeFeature:
		*s = MunroAccessMunrosGetOKMunrosFeaturesItemTypeFeature
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type MunroAccessMunrosGetOKMunrosType string

const (
	MunroAccessMunrosGetOKMunrosTypeFeatureCollection MunroAccessMunrosGetOKMunrosType = "FeatureCollection"
)

// AllValues returns all MunroAccessMunrosGetOKMunrosType values.
func (MunroAccessMunrosGetOKMunrosType) AllValues() []MunroAccessMunrosGetOKMunrosType {
	return []MunroAccessMunrosGetOKMunrosType{
		MunroAccessMunrosGetOKMunrosTypeFeatureCollection,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s MunroAccessMunrosGetOKMunrosType) MarshalText() ([]byte, error) {
	switch s {
	case MunroAccessMunrosGetOKMunrosTypeFeatureCollection:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *MunroAccessMunrosGetOKMunrosType) UnmarshalText(data []byte) error {
	switch MunroAccessMunrosGetOKMunrosType(data) {
	case MunroAccessMunrosGetOKMunrosTypeFeatureCollection:
		*s = MunroAccessMunrosGetOKMunrosTypeFeatureCollection
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// MunroAccessReportIDGetTemporaryRedirect is response for MunroAccessReportIDGet operation.
type MunroAccessReportIDGetTemporaryRedirect struct {
	Location OptString
}

// GetLocation returns the value of Location.
func (s *MunroAccessReportIDGetTemporaryRedirect) GetLocation() OptString {
	return s.Location
}

// SetLocation sets the value of Location.
func (s *MunroAccessReportIDGetTemporaryRedirect) SetLocation(val OptString) {
	s.Location = val
}

type MunroAccessReportIDStatusGetOK struct {
	ID        string                               `json:"id"`
	Timestamp time.Time                            `json:"timestamp"`
	Status    MunroAccessReportIDStatusGetOKStatus `json:"status"`
	Report    MunroAccessReportIDStatusGetOKReport `json:"report"`
}

// GetID returns the value of ID.
func (s *MunroAccessReportIDStatusGetOK) GetID() string {
	return s.ID
}

// GetTimestamp returns the value of Timestamp.
func (s *MunroAccessReportIDStatusGetOK) GetTimestamp() time.Time {
	return s.Timestamp
}

// GetStatus returns the value of Status.
func (s *MunroAccessReportIDStatusGetOK) GetStatus() MunroAccessReportIDStatusGetOKStatus {
	return s.Status
}

// GetReport returns the value of Report.
func (s *MunroAccessReportIDStatusGetOK) GetReport() MunroAccessReportIDStatusGetOKReport {
	return s.Report
}

// SetID sets the value of ID.
func (s *MunroAccessReportIDStatusGetOK) SetID(val string) {
	s.ID = val
}

// SetTimestamp sets the value of Timestamp.
func (s *MunroAccessReportIDStatusGetOK) SetTimestamp(val time.Time) {
	s.Timestamp = val
}

// SetStatus sets the value of Status.
func (s *MunroAccessReportIDStatusGetOK) SetStatus(val MunroAccessReportIDStatusGetOKStatus) {
	s.Status = val
}

// SetReport sets the value of Report.
func (s *MunroAccessReportIDStatusGetOK) SetReport(val MunroAccessReportIDStatusGetOKReport) {
	s.Report = val
}

type MunroAccessReportIDStatusGetOKReport struct {
	FromLabel   string    `json:"fromLabel"`
	FromPoint   Point     `json:"fromPoint"`
	Date        time.Time `json:"date"`
	RequestTime time.Time `json:"requestTime"`
	// URL to report JSON.
	URL OptString `json:"url"`
}

// GetFromLabel returns the value of FromLabel.
func (s *MunroAccessReportIDStatusGetOKReport) GetFromLabel() string {
	return s.FromLabel
}

// GetFromPoint returns the value of FromPoint.
func (s *MunroAccessReportIDStatusGetOKReport) GetFromPoint() Point {
	return s.FromPoint
}

// GetDate returns the value of Date.
func (s *MunroAccessReportIDStatusGetOKReport) GetDate() time.Time {
	return s.Date
}

// GetRequestTime returns the value of RequestTime.
func (s *MunroAccessReportIDStatusGetOKReport) GetRequestTime() time.Time {
	return s.RequestTime
}

// GetURL returns the value of URL.
func (s *MunroAccessReportIDStatusGetOKReport) GetURL() OptString {
	return s.URL
}

// SetFromLabel sets the value of FromLabel.
func (s *MunroAccessReportIDStatusGetOKReport) SetFromLabel(val string) {
	s.FromLabel = val
}

// SetFromPoint sets the value of FromPoint.
func (s *MunroAccessReportIDStatusGetOKReport) SetFromPoint(val Point) {
	s.FromPoint = val
}

// SetDate sets the value of Date.
func (s *MunroAccessReportIDStatusGetOKReport) SetDate(val time.Time) {
	s.Date = val
}

// SetRequestTime sets the value of RequestTime.
func (s *MunroAccessReportIDStatusGetOKReport) SetRequestTime(val time.Time) {
	s.RequestTime = val
}

// SetURL sets the value of URL.
func (s *MunroAccessReportIDStatusGetOKReport) SetURL(val OptString) {
	s.URL = val
}

type MunroAccessReportIDStatusGetOKStatus string

const (
	MunroAccessReportIDStatusGetOKStatusReceived MunroAccessReportIDStatusGetOKStatus = "received"
	MunroAccessReportIDStatusGetOKStatusWorking  MunroAccessReportIDStatusGetOKStatus = "working"
	MunroAccessReportIDStatusGetOKStatusReady    MunroAccessReportIDStatusGetOKStatus = "ready"
)

// AllValues returns all MunroAccessReportIDStatusGetOKStatus values.
func (MunroAccessReportIDStatusGetOKStatus) AllValues() []MunroAccessReportIDStatusGetOKStatus {
	return []MunroAccessReportIDStatusGetOKStatus{
		MunroAccessReportIDStatusGetOKStatusReceived,
		MunroAccessReportIDStatusGetOKStatusWorking,
		MunroAccessReportIDStatusGetOKStatusReady,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s MunroAccessReportIDStatusGetOKStatus) MarshalText() ([]byte, error) {
	switch s {
	case MunroAccessReportIDStatusGetOKStatusReceived:
		return []byte(s), nil
	case MunroAccessReportIDStatusGetOKStatusWorking:
		return []byte(s), nil
	case MunroAccessReportIDStatusGetOKStatusReady:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *MunroAccessReportIDStatusGetOKStatus) UnmarshalText(data []byte) error {
	switch MunroAccessReportIDStatusGetOKStatus(data) {
	case MunroAccessReportIDStatusGetOKStatusReceived:
		*s = MunroAccessReportIDStatusGetOKStatusReceived
		return nil
	case MunroAccessReportIDStatusGetOKStatusWorking:
		*s = MunroAccessReportIDStatusGetOKStatusWorking
		return nil
	case MunroAccessReportIDStatusGetOKStatusReady:
		*s = MunroAccessReportIDStatusGetOKStatusReady
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type MunroAccessRequestPostOK struct {
	ID string `json:"id"`
}

// GetID returns the value of ID.
func (s *MunroAccessRequestPostOK) GetID() string {
	return s.ID
}

// SetID sets the value of ID.
func (s *MunroAccessRequestPostOK) SetID(val string) {
	s.ID = val
}

type MunroAccessRequestPostReq struct {
	FromLabel string    `json:"fromLabel"`
	FromPoint Point     `json:"fromPoint"`
	Date      time.Time `json:"date"`
}

// GetFromLabel returns the value of FromLabel.
func (s *MunroAccessRequestPostReq) GetFromLabel() string {
	return s.FromLabel
}

// GetFromPoint returns the value of FromPoint.
func (s *MunroAccessRequestPostReq) GetFromPoint() Point {
	return s.FromPoint
}

// GetDate returns the value of Date.
func (s *MunroAccessRequestPostReq) GetDate() time.Time {
	return s.Date
}

// SetFromLabel sets the value of FromLabel.
func (s *MunroAccessRequestPostReq) SetFromLabel(val string) {
	s.FromLabel = val
}

// SetFromPoint sets the value of FromPoint.
func (s *MunroAccessRequestPostReq) SetFromPoint(val Point) {
	s.FromPoint = val
}

// SetDate sets the value of Date.
func (s *MunroAccessRequestPostReq) SetDate(val time.Time) {
	s.Date = val
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto returns new OptMunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto with value set to v.
func NewOptMunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto(v MunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto) OptMunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto {
	return OptMunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto{
		Value: v,
		Set:   true,
	}
}

// OptMunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto is optional MunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto.
type OptMunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto struct {
	Value MunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto
	Set   bool
}

// IsSet returns true if OptMunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto was set.
func (o OptMunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto) Reset() {
	var v MunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto) SetTo(v MunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto) Get() (v MunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto) Or(d MunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto) MunroAccessMunrosGetOKMunrosFeaturesItemPropertiesPhoto {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSetSessionCookieHeader returns new OptSetSessionCookieHeader with value set to v.
func NewOptSetSessionCookieHeader(v SetSessionCookieHeader) OptSetSessionCookieHeader {
	return OptSetSessionCookieHeader{
		Value: v,
		Set:   true,
	}
}

// OptSetSessionCookieHeader is optional SetSessionCookieHeader.
type OptSetSessionCookieHeader struct {
	Value SetSessionCookieHeader
	Set   bool
}

// IsSet returns true if OptSetSessionCookieHeader was set.
func (o OptSetSessionCookieHeader) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSetSessionCookieHeader) Reset() {
	var v SetSessionCookieHeader
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSetSessionCookieHeader) SetTo(v SetSessionCookieHeader) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSetSessionCookieHeader) Get() (v SetSessionCookieHeader, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSetSessionCookieHeader) Or(d SetSessionCookieHeader) SetSessionCookieHeader {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptValidationErrors returns new OptValidationErrors with value set to v.
func NewOptValidationErrors(v ValidationErrors) OptValidationErrors {
	return OptValidationErrors{
		Value: v,
		Set:   true,
	}
}

// OptValidationErrors is optional ValidationErrors.
type OptValidationErrors struct {
	Value ValidationErrors
	Set   bool
}

// IsSet returns true if OptValidationErrors was set.
func (o OptValidationErrors) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptValidationErrors) Reset() {
	var v ValidationErrors
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptValidationErrors) SetTo(v ValidationErrors) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptValidationErrors) Get() (v ValidationErrors, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptValidationErrors) Or(d ValidationErrors) ValidationErrors {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptValidationErrorsFieldErrors returns new OptValidationErrorsFieldErrors with value set to v.
func NewOptValidationErrorsFieldErrors(v ValidationErrorsFieldErrors) OptValidationErrorsFieldErrors {
	return OptValidationErrorsFieldErrors{
		Value: v,
		Set:   true,
	}
}

// OptValidationErrorsFieldErrors is optional ValidationErrorsFieldErrors.
type OptValidationErrorsFieldErrors struct {
	Value ValidationErrorsFieldErrors
	Set   bool
}

// IsSet returns true if OptValidationErrorsFieldErrors was set.
func (o OptValidationErrorsFieldErrors) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptValidationErrorsFieldErrors) Reset() {
	var v ValidationErrorsFieldErrors
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptValidationErrorsFieldErrors) SetTo(v ValidationErrorsFieldErrors) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptValidationErrorsFieldErrors) Get() (v ValidationErrorsFieldErrors, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptValidationErrorsFieldErrors) Or(d ValidationErrorsFieldErrors) ValidationErrorsFieldErrors {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type Point []float64

type SetSessionCookieHeader string

type Token string

// Ref: #/components/schemas/User
type User struct {
	ID             UserID    `json:"id"`
	Name           OptString `json:"name"`
	Email          string    `json:"email"`
	EmailConfirmed OptBool   `json:"emailConfirmed"`
}

// GetID returns the value of ID.
func (s *User) GetID() UserID {
	return s.ID
}

// GetName returns the value of Name.
func (s *User) GetName() OptString {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *User) GetEmail() string {
	return s.Email
}

// GetEmailConfirmed returns the value of EmailConfirmed.
func (s *User) GetEmailConfirmed() OptBool {
	return s.EmailConfirmed
}

// SetID sets the value of ID.
func (s *User) SetID(val UserID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *User) SetName(val OptString) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *User) SetEmail(val string) {
	s.Email = val
}

// SetEmailConfirmed sets the value of EmailConfirmed.
func (s *User) SetEmailConfirmed(val OptBool) {
	s.EmailConfirmed = val
}

type UserID string

// Ref: #/components/schemas/ValidationErrors
type ValidationErrors struct {
	GeneralErrors []string                       `json:"generalErrors"`
	FieldErrors   OptValidationErrorsFieldErrors `json:"fieldErrors"`
}

// GetGeneralErrors returns the value of GeneralErrors.
func (s *ValidationErrors) GetGeneralErrors() []string {
	return s.GeneralErrors
}

// GetFieldErrors returns the value of FieldErrors.
func (s *ValidationErrors) GetFieldErrors() OptValidationErrorsFieldErrors {
	return s.FieldErrors
}

// SetGeneralErrors sets the value of GeneralErrors.
func (s *ValidationErrors) SetGeneralErrors(val []string) {
	s.GeneralErrors = val
}

// SetFieldErrors sets the value of FieldErrors.
func (s *ValidationErrors) SetFieldErrors(val OptValidationErrorsFieldErrors) {
	s.FieldErrors = val
}

type ValidationErrorsFieldErrors map[string]string

func (s *ValidationErrorsFieldErrors) init() ValidationErrorsFieldErrors {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type WeatherShortUkGetOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s WeatherShortUkGetOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}
