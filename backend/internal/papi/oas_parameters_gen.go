// Code generated by ogen, DO NOT EDIT.

package papi

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// GeophotosGetParams is parameters of GET /geophotos operation.
type GeophotosGetParams struct {
	ID     []int
	MinLng OptFloat64
	MinLat OptFloat64
	MaxLng OptFloat64
	MaxLat OptFloat64
}

func unpackGeophotosGetParams(packed middleware.Parameters) (params GeophotosGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.ID = v.([]int)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "minLng",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.MinLng = v.(OptFloat64)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "minLat",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.MinLat = v.(OptFloat64)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "maxLng",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.MaxLng = v.(OptFloat64)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "maxLat",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.MaxLat = v.(OptFloat64)
		}
	}
	return params
}

func decodeGeophotosGetParams(args [0]string, argsEscaped bool, r *http.Request) (params GeophotosGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotIDVal int
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToInt(val)
						if err != nil {
							return err
						}

						paramsDotIDVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.ID = append(params.ID, paramsDotIDVal)
					return nil
				})
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: minLng.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "minLng",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotMinLngVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					paramsDotMinLngVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.MinLng.SetTo(paramsDotMinLngVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.MinLng.Get(); ok {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(value)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "minLng",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: minLat.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "minLat",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotMinLatVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					paramsDotMinLatVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.MinLat.SetTo(paramsDotMinLatVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.MinLat.Get(); ok {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(value)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "minLat",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: maxLng.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "maxLng",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotMaxLngVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					paramsDotMaxLngVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.MaxLng.SetTo(paramsDotMaxLngVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.MaxLng.Get(); ok {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(value)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "maxLng",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: maxLat.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "maxLat",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotMaxLatVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					paramsDotMaxLatVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.MaxLat.SetTo(paramsDotMaxLatVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.MaxLat.Get(); ok {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(value)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "maxLat",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GeosearchGetParams is parameters of GET /geosearch operation.
type GeosearchGetParams struct {
	Text     string
	BiasLng  OptFloat64
	BiasLat  OptFloat64
	BiasZoom OptInt
	// If true the search may take longer but may be of higher quality.
	HigherQuality OptBool
	Debug         OptBool
}

func unpackGeosearchGetParams(packed middleware.Parameters) (params GeosearchGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "text",
			In:   "query",
		}
		params.Text = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "biasLng",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.BiasLng = v.(OptFloat64)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "biasLat",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.BiasLat = v.(OptFloat64)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "biasZoom",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.BiasZoom = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "higherQuality",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.HigherQuality = v.(OptBool)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "debug",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Debug = v.(OptBool)
		}
	}
	return params
}

func decodeGeosearchGetParams(args [0]string, argsEscaped bool, r *http.Request) (params GeosearchGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: text.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "text",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Text = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "text",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: biasLng.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "biasLng",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBiasLngVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					paramsDotBiasLngVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.BiasLng.SetTo(paramsDotBiasLngVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.BiasLng.Get(); ok {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(value)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "biasLng",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: biasLat.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "biasLat",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBiasLatVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					paramsDotBiasLatVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.BiasLat.SetTo(paramsDotBiasLatVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.BiasLat.Get(); ok {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(value)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "biasLat",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: biasZoom.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "biasZoom",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBiasZoomVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotBiasZoomVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.BiasZoom.SetTo(paramsDotBiasZoomVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "biasZoom",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: higherQuality.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "higherQuality",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotHigherQualityVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotHigherQualityVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.HigherQuality.SetTo(paramsDotHigherQualityVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "higherQuality",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: debug.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "debug",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDebugVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotDebugVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Debug.SetTo(paramsDotDebugVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "debug",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// MunroAccessReportIDGetParams is parameters of GET /munro-access/report/{id} operation.
type MunroAccessReportIDGetParams struct {
	ID string
}

func unpackMunroAccessReportIDGetParams(packed middleware.Parameters) (params MunroAccessReportIDGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(string)
	}
	return params
}

func decodeMunroAccessReportIDGetParams(args [1]string, argsEscaped bool, r *http.Request) (params MunroAccessReportIDGetParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// MunroAccessReportIDStatusGetParams is parameters of GET /munro-access/report/{id}/status operation.
type MunroAccessReportIDStatusGetParams struct {
	ID string
}

func unpackMunroAccessReportIDStatusGetParams(packed middleware.Parameters) (params MunroAccessReportIDStatusGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(string)
	}
	return params
}

func decodeMunroAccessReportIDStatusGetParams(args [1]string, argsEscaped bool, r *http.Request) (params MunroAccessReportIDStatusGetParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// TracksGetParams is parameters of GET /tracks operation.
type TracksGetParams struct {
	Page    OptInt
	PerPage OptInt
	OrderBy OptTracksGetOrderBy
}

func unpackTracksGetParams(packed middleware.Parameters) (params TracksGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "perPage",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PerPage = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "orderBy",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.OrderBy = v.(OptTracksGetOrderBy)
		}
	}
	return params
}

func decodeTracksGetParams(args [0]string, argsEscaped bool, r *http.Request) (params TracksGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Page.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: perPage.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "perPage",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.PerPage.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        true,
							Max:           1000,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "perPage",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: orderBy.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "orderBy",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOrderByVal TracksGetOrderBy
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotOrderByVal = TracksGetOrderBy(c)
					return nil
				}(); err != nil {
					return err
				}
				params.OrderBy.SetTo(paramsDotOrderByVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.OrderBy.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "orderBy",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// TracksTileZXYMvtGetParams is parameters of GET /tracks/tile/{z}/{x}/{y}.mvt operation.
type TracksTileZXYMvtGetParams struct {
	Z int
	X int
	Y int
}

func unpackTracksTileZXYMvtGetParams(packed middleware.Parameters) (params TracksTileZXYMvtGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "z",
			In:   "path",
		}
		params.Z = packed[key].(int)
	}
	{
		key := middleware.ParameterKey{
			Name: "x",
			In:   "path",
		}
		params.X = packed[key].(int)
	}
	{
		key := middleware.ParameterKey{
			Name: "y",
			In:   "path",
		}
		params.Y = packed[key].(int)
	}
	return params
}

func decodeTracksTileZXYMvtGetParams(args [3]string, argsEscaped bool, r *http.Request) (params TracksTileZXYMvtGetParams, _ error) {
	// Decode path: z.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "z",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.Z = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "z",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: x.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "x",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.X = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "x",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: y.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "y",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.Y = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "y",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// TracksTrackIDDeleteParams is parameters of DELETE /tracks/track/{id} operation.
type TracksTrackIDDeleteParams struct {
	ID string
}

func unpackTracksTrackIDDeleteParams(packed middleware.Parameters) (params TracksTrackIDDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(string)
	}
	return params
}

func decodeTracksTrackIDDeleteParams(args [1]string, argsEscaped bool, r *http.Request) (params TracksTrackIDDeleteParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// TracksTrackIDGetParams is parameters of GET /tracks/track/{id} operation.
type TracksTrackIDGetParams struct {
	ID string
}

func unpackTracksTrackIDGetParams(packed middleware.Parameters) (params TracksTrackIDGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(string)
	}
	return params
}

func decodeTracksTrackIDGetParams(args [1]string, argsEscaped bool, r *http.Request) (params TracksTrackIDGetParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// TracksTrackIDPatchParams is parameters of PATCH /tracks/track/{id} operation.
type TracksTrackIDPatchParams struct {
	ID string
}

func unpackTracksTrackIDPatchParams(packed middleware.Parameters) (params TracksTrackIDPatchParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(string)
	}
	return params
}

func decodeTracksTrackIDPatchParams(args [1]string, argsEscaped bool, r *http.Request) (params TracksTrackIDPatchParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// WeatherShortUkGetParams is parameters of GET /weather/short-uk operation.
type WeatherShortUkGetParams struct {
	// A place to search for.
	Query string
}

func unpackWeatherShortUkGetParams(packed middleware.Parameters) (params WeatherShortUkGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "query",
			In:   "query",
		}
		params.Query = packed[key].(string)
	}
	return params
}

func decodeWeatherShortUkGetParams(args [0]string, argsEscaped bool, r *http.Request) (params WeatherShortUkGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: query.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "query",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Query = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "query",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
