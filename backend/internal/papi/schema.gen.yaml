openapi: "3.0.0"
info:
  version: 0.1.0
  title: PlanTopo API
  description: Internal API for PlanTopo.com
  contact: { }
servers:
  - url: "https://api.plantopo.com/api/v1"
    description: "Production"
  - url: "http://localhost:4000/api/v1"
    description: "Local development"
security:
  - { } # permits unauthenticated requests
  - bearer: [ ]
  - browser: [ ]
tags:
  - name: "auth"
  - name: "elevation"
  - name: "weather"
  - name: "munro-access-reports"
paths:
  /auth/check:
    post:
      tags: [ "auth" ]
      summary: "Check if you are authenticated"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  userID: { $ref: "#/components/schemas/UserID" }
                required: [ "userID" ]
        default: { $ref: "#/components/responses/DefaultErrorResponse" }
  /auth/authenticate:
    post:
      tags: [ "auth" ]
      summary: "Authenticate as a user (see /auth/authenticate-browser if you are the frontend)"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/AuthenticateReq" }
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema: { $ref: "#/components/schemas/AuthenticateOK" }
        default: { $ref: "#/components/responses/DefaultErrorResponse" }
  /auth/authenticate-browser:
    post:
      tags: [ "auth" ]
      summary: "Authenticate and store the token in the requesting browser's cookie jar"
      description: "This sets a cookie authenticating you as the given user. The cookie will only work on plantopo.com"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/AuthenticateReq" }
      responses:
        "200":
          description: "OK"
          headers:
            Set-Cookie:
              schema: { $ref: "#/components/schemas/SetSessionCookieHeader" }
          content:
            application/json:
              schema: { $ref: "#/components/schemas/AuthenticateBrowserOK" }
        default: { $ref: "#/components/responses/DefaultErrorResponse" }
  /auth/revoke:
    post:
      tags: [ "auth" ]
      summary: "Revoke a token"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/AuthRevokeReq" }
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
        default: { $ref: "#/components/responses/DefaultErrorResponse" }
  /auth/revoke-browser:
    post:
      tags: [ "auth" ]
      summary: "Revoke the token stored in the requesting browser's cookie jar"
      description: "Revokes the cookie set by /auth/authenticate-browser"
      responses:
        "200":
          description: "OK"
          headers:
            Set-Cookie:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: "object"
        default: { $ref: "#/components/responses/DefaultErrorResponse" }
  /auth/register:
    post:
      tags: [ "auth" ]
      summary: "Register a new account"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/AuthRegisterRequest" }
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema: { $ref: "#/components/schemas/AuthenticateOK" }
        default: { $ref: "#/components/responses/DefaultErrorResponse" }
  /auth/register-browser:
    post:
      summary: "Register a new account and store the token in the requesting browser's cookie jar"
      tags: [ "auth" ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/AuthRegisterRequest" }
      responses:
        "200":
          description: "OK"
          headers:
            Set-Cookie:
              schema: { $ref: "#/components/schemas/SetSessionCookieHeader" }
          content:
            application/json:
              schema: { $ref: "#/components/schemas/AuthenticateBrowserOK" }
        default: { $ref: "#/components/responses/DefaultErrorResponse" }

  /elevation:
    post:
      tags: [ "elevation" ]
      summary: "Lookup elevations for a list of coordinates"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ElevationPostReq" }
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ElevationPostOK" }
        default: { $ref: "#/components/responses/DefaultErrorResponse" }

  /weather/short-uk:
    get:
      tags: [ "weather" ]
      summary: "Find short format weather forecasts for a place in the UK"
      parameters:
        - in: query
          name: query
          required: true
          schema:
            type: string
          description: A place to search for
          example: "ben nevis"
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: string
                example: |
                  Mon 22 Partly cloudy 7% 9,Tue 1 " 0% 9,4 Clear 0% 7,7 Sunny 0% 11,10 " 0% 13,13 Partly cloudy 0% 13,16 Sunny 0% 13,19 " 0% 11,22 Clear 0% 9
        default: { $ref: "#/components/responses/DefaultErrorResponse" }

  /munro-access/request:
    post:
      tags: [ "munro-access-reports" ]
      summary: Request a report be generated
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fromLabel:
                  type: string
                  example: "Edinburgh Waverley Railway Station (EDB)"
                fromPoint:
                  $ref: "#/components/schemas/Point"
                date:
                  type: string
                  format: date-time
              required: [ "fromLabel", "fromPoint", "date" ]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                required: [ "id" ]
        default: { $ref: "#/components/responses/DefaultErrorResponse" }

  /munro-access/report/{id}:
    get:
      tags: [ "munro-access-reports" ]
      summary: Get a report
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: example
      responses:
        "307":
          description: "Redirect"
          headers:
            Location:
              schema:
                type: string
        default: { $ref: "#/components/responses/DefaultErrorResponse" }
  /munro-access/report/{id}/status:
    get:
      tags: [ "munro-access-reports" ]
      summary: Get report generation status
      description: |
        To subscribe to status updates use `new EventSource('/munro-access/report/{id}/status-updates')`
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: example
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "1724364326040-0"
                  timestamp:
                    type: string
                    format: date-time
                  status:
                    type: string
                    enum: [ received, working, ready ]
                  report:
                    type: object
                    properties:
                      fromLabel:
                        type: string
                        example: "Edinburgh Waverley Railway Station (EDB)"
                      fromPoint:
                        $ref: "#/components/schemas/Point"
                      date:
                        type: string
                        format: date-time
                      requestTime:
                        type: string
                        format: date-time
                      url:
                        type: string
                        description: URL to report JSON
                        example: https://...
                    required: [ "fromLabel", "fromPoint", "date", "requestTime" ]
                required: [ "id", "timestamp", "status", "report" ]
        default: { $ref: "#/components/responses/DefaultErrorResponse" }
  /munro-access/munros:
    get:
      tags: [ "munro-access-reports" ]
      summary: List munros
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  munros:
                    type: object
                    properties:
                      type:
                        type: string
                        enum: [ "FeatureCollection" ]
                      features:
                        type: array
                        items:
                          type: object
                          properties:
                            type:
                              type: string
                              enum: [ "Feature" ]
                            id:
                              type: integer
                              example: 1
                            properties:
                              type: object
                              properties:
                                name:
                                  type: string
                                  example: Ben Chonzie
                                meters:
                                  type: number
                                  example: 930.4
                                photo:
                                  type: object
                                  properties:
                                    source:
                                      type: string
                                      example: "https://..."
                                    width:
                                      type: integer
                                      example: 800
                                    height:
                                      type: integer
                                      example: 600
                                    author:
                                      type: string
                                      example: Angus
                                    sourceText:
                                      type: string
                                      example: geograph.org.uk
                                    sourceLink:
                                      type: string
                                      example: https://www.geograph.org.uk
                                  required: [ "source", "width", "height" ]
                              required: [ "name", "meters" ]
                            geometry:
                              type: object
                              properties:
                                type:
                                  type: string
                                  enum: [ "Point" ]
                                coordinates:
                                  type: array
                                  items:
                                    type: number
                                  minItems: 2
                                  maxItems: 2
                                  example: [ -3.992057, 56.453851 ]
                              required: [ "type", "coordinates" ]
                          required: [ "type", "id", "properties", "geometry" ]
                    required: [ "type", "features" ]
                required: [ "munros" ]
        default: { $ref: "#/components/responses/DefaultErrorResponse" }
components:
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
    browser:
      type: apiKey
      in: cookie
      name: "session"
  responses:
    DefaultErrorResponse:
      description: "Error"
      content:
        application/json:
          schema: { $ref: "#/components/schemas/DefaultError" }
  schemas:
    AuthRegisterRequest:
      type: object
      properties:
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          example: "john.doe@example.com"
        password:
          type: string
          example: "password"
      required: [ "name", "email", "password" ]
    DefaultError:
      type: object
      properties:
        message:
          type: string
        retryAfterSeconds:
          type: "integer"
        validationErrors:
          $ref: "#/components/schemas/ValidationErrors"
      required: [ "message" ]
      example:
          message: "internal server error (correlation id cor_e0a3b2628acbb22dad4696acaf30be88)"
    ValidationErrors:
      type: object
      properties:
        generalErrors:
          type: array
          items: { type: string }
        fieldErrors:
          type: object
          additionalProperties: { type: string }
    AuthenticateReq:
      type: object
      properties:
        email:
          type: string
          example: "user@example.com"
        password:
          type: string
          example: "password"
      required: [ "email", "password" ]
    AuthenticateOK:
      type: object
      properties:
        token: { $ref: "#/components/schemas/Token" }
        user: { $ref: "#/components/schemas/User" }
      required: [ "token", "user" ]
    AuthenticateBrowserOK:
      type: object
      properties:
        user: { $ref: "#/components/schemas/User" }
      required: [ "user" ]
    AuthRevokeReq:
      type: object
      properties:
        token: { $ref: "#/components/schemas/Token" }
      required: [ "token" ]
    User:
      type: object
      properties:
        id: { $ref: "#/components/schemas/UserID" }
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          example: "john.doe@example.com"
        emailConfirmed:
          type: "boolean"
          example: true
      required: [ "id", "email" ]
    UserID:
      type: string
      example: "u_248h248h248h248h248h248h24"
    Token:
      type: string
      example: "plantoposecret_db480e5c2aa6f443ff721116b352e88c396351fd20eee0c95ed272cba311edd6890f6759931d2cdca4acb16d90a8d2af0ee9af83b35446fda1c8e272fa378462"
    SetSessionCookieHeader:
      type: string
      example: "session=plantoposecret_db480e5c2aa6f443ff721116b352e88c396351fd20eee0c95ed272cba311edd6890f6759931d2cdca4acb16d90a8d2af0ee9af83b35446fda1c8e272fa378462; ..."
    ElevationPostReq:
      type: object
      properties:
        coordinates:
          type: array
          items:
            type: array
            items: { type: number }
            minItems: 2
            maxItems: 2
      example:
        coordinates: [ [ -105.883643, 40.176097 ], [ -105.861114, 40.150743 ], [ -105.822319, 40.14182 ] ]
      required: [ "coordinates" ]
    ElevationPostOK:
      type: object
      properties:
        elevation:
          type: array
          items:
            type: "number"
      required: [ "elevation" ]
      example:
        elevation: [ 2518, 2518, 2518 ]
    Point:
      type: array
      items:
        type: number
      minItems: 2
      maxItems: 2
      example: [ -3.36459,55.948390 ]
      description: longitude, latitude
