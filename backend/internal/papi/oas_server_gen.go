// Code generated by ogen, DO NOT EDIT.

package papi

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// AuthAuthenticateBrowserPost implements POST /auth/authenticate-browser operation.
	//
	// This sets a cookie authenticating you as the given user. The cookie will only work on plantopo.com.
	//
	// POST /auth/authenticate-browser
	AuthAuthenticateBrowserPost(ctx context.Context, req *AuthenticateReq) (*AuthenticateBrowserOKHeaders, error)
	// AuthAuthenticatePost implements POST /auth/authenticate operation.
	//
	// Authenticate as a user (see /auth/authenticate-browser if you are the frontend).
	//
	// POST /auth/authenticate
	AuthAuthenticatePost(ctx context.Context, req *AuthenticateReq) (*AuthenticateOK, error)
	// AuthCheckPost implements POST /auth/check operation.
	//
	// Check if you are authenticated.
	//
	// POST /auth/check
	AuthCheckPost(ctx context.Context) (*AuthCheckPostOK, error)
	// AuthMeGet implements GET /auth/me operation.
	//
	// Get the authenticated user.
	//
	// GET /auth/me
	AuthMeGet(ctx context.Context) (*AuthMeGetOK, error)
	// AuthRegisterBrowserPost implements POST /auth/register-browser operation.
	//
	// Register a new account and store the token in the requesting browser's cookie jar.
	//
	// POST /auth/register-browser
	AuthRegisterBrowserPost(ctx context.Context, req *AuthRegisterRequest) (*AuthenticateBrowserOKHeaders, error)
	// AuthRegisterPost implements POST /auth/register operation.
	//
	// Register a new account.
	//
	// POST /auth/register
	AuthRegisterPost(ctx context.Context, req *AuthRegisterRequest) (*AuthenticateOK, error)
	// AuthRevokeBrowserPost implements POST /auth/revoke-browser operation.
	//
	// Revokes the cookie set by /auth/authenticate-browser.
	//
	// POST /auth/revoke-browser
	AuthRevokeBrowserPost(ctx context.Context) (*AuthRevokeBrowserPostOKHeaders, error)
	// AuthRevokePost implements POST /auth/revoke operation.
	//
	// Revoke a token.
	//
	// POST /auth/revoke
	AuthRevokePost(ctx context.Context, req *AuthRevokeReq) error
	// ElevationPost implements POST /elevation operation.
	//
	// Lookup elevations for a list of coordinates.
	//
	// POST /elevation
	ElevationPost(ctx context.Context, req *ElevationPostReq) (*ElevationPostOK, error)
	// GeophotosGet implements GET /geophotos operation.
	//
	// Get metadata by ID.
	//
	// GET /geophotos
	GeophotosGet(ctx context.Context, params GeophotosGetParams) (*GeophotosGetOK, error)
	// GeosearchGet implements GET /geosearch operation.
	//
	// Search things that can be displayed on a map.
	//
	// GET /geosearch
	GeosearchGet(ctx context.Context, params GeosearchGetParams) (*GeosearchGetOK, error)
	// MunroAccessMunrosGet implements GET /munro-access/munros operation.
	//
	// List munros.
	//
	// GET /munro-access/munros
	MunroAccessMunrosGet(ctx context.Context) (*MunroAccessMunrosGetOK, error)
	// MunroAccessPregeneratedReportsGet implements GET /munro-access/pregenerated-reports operation.
	//
	// Get pregenerated reports for common locations.
	//
	// GET /munro-access/pregenerated-reports
	MunroAccessPregeneratedReportsGet(ctx context.Context) (*MunroAccessPregeneratedReportsGetOK, error)
	// MunroAccessReportIDGet implements GET /munro-access/report/{id} operation.
	//
	// Get a report.
	//
	// GET /munro-access/report/{id}
	MunroAccessReportIDGet(ctx context.Context, params MunroAccessReportIDGetParams) (*MunroAccessReportIDGetTemporaryRedirect, error)
	// MunroAccessReportIDStatusGet implements GET /munro-access/report/{id}/status operation.
	//
	// To subscribe to status updates use `new EventSource('/munro-access/report/{id}/status-updates')`.
	//
	// GET /munro-access/report/{id}/status
	MunroAccessReportIDStatusGet(ctx context.Context, params MunroAccessReportIDStatusGetParams) (*MunroAccessReportStatus, error)
	// MunroAccessRequestPost implements POST /munro-access/request operation.
	//
	// Request a report be generated.
	//
	// POST /munro-access/request
	MunroAccessRequestPost(ctx context.Context, req *MunroAccessRequestPostReq) (*MunroAccessRequestPostOK, error)
	// SepaStationsGet implements GET /sepa-stations operation.
	//
	// List SEPA monitoring stations as GeoJSON.
	//
	// GET /sepa-stations
	SepaStationsGet(ctx context.Context) (FeatureCollection, error)
	// SettingsGet implements GET /settings operation.
	//
	// Get settings.
	//
	// GET /settings
	SettingsGet(ctx context.Context) (*SettingsGetOK, error)
	// SettingsPut implements PUT /settings operation.
	//
	// Update settings.
	//
	// PUT /settings
	SettingsPut(ctx context.Context, req *SettingsPutReq) (*SettingsPutOK, error)
	// TracksGet implements GET /tracks operation.
	//
	// List tracks.
	//
	// GET /tracks
	TracksGet(ctx context.Context, params TracksGetParams) (*TracksGetOK, error)
	// TracksPost implements POST /tracks operation.
	//
	// Create track.
	//
	// POST /tracks
	TracksPost(ctx context.Context, req *TracksPostReq) (*TracksPostOK, error)
	// TracksTileZXYMvtGet implements GET /tracks/tile/{z}/{x}/{y}.mvt operation.
	//
	// Get MVT tile.
	//
	// GET /tracks/tile/{z}/{x}/{y}.mvt
	TracksTileZXYMvtGet(ctx context.Context, params TracksTileZXYMvtGetParams) (*MVTTileHeaders, error)
	// TracksTrackIDDelete implements DELETE /tracks/track/{id} operation.
	//
	// Delete track.
	//
	// DELETE /tracks/track/{id}
	TracksTrackIDDelete(ctx context.Context, params TracksTrackIDDeleteParams) error
	// TracksTrackIDGet implements GET /tracks/track/{id} operation.
	//
	// Get track.
	//
	// GET /tracks/track/{id}
	TracksTrackIDGet(ctx context.Context, params TracksTrackIDGetParams) (*TracksTrackIDGetOK, error)
	// TracksTrackIDPatch implements PATCH /tracks/track/{id} operation.
	//
	// Update track.
	//
	// PATCH /tracks/track/{id}
	TracksTrackIDPatch(ctx context.Context, req *TracksTrackIDPatchReq, params TracksTrackIDPatchParams) (*TracksTrackIDPatchOK, error)
	// WeatherShortUkGet implements GET /weather/short-uk operation.
	//
	// Find short format weather forecasts for a place in the UK.
	//
	// GET /weather/short-uk
	WeatherShortUkGet(ctx context.Context, params WeatherShortUkGetParams) (WeatherShortUkGetOK, error)
	// NewError creates *DefaultErrorResponseStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *DefaultErrorResponseStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
