package demouser

import (
	"context"
	"encoding/json"
	"github.com/dzfranklin/plantopo/backend/internal/prepo"
	"github.com/dzfranklin/plantopo/backend/internal/ptest"
	"github.com/dzfranklin/plantopo/backend/internal/ptime"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"github.com/tidwall/geojson/geometry"
	"net/http"
	"net/http/httptest"
	"testing"
)

var sampleTracksFile = "{\"name\":\"11440752\",\"date\":\"2024-08-25T10:21:24Z\",\"line\":\"is~_JgcshA@AB@@@?@BB@@B@@?@?B@@@@@@@@@?B@D?D?B?B?B@BB?@@@?B?@A@?@A??@@@@BB@??B@@?B?B@B@D?B?@@B@B@@@@@?B?@?@?@?@?@@@A@?BC@A@?@C@?@?@@@@@@@?@ABA@A@A@@@@@?@@@B@B@@@@@?@?@@@?@@@@@@@@@@@?@?@@BA@?@A@?@?@?@?@?B@@?@@@BBC@A@?@A@A@?BA@A?ABC@A?A@?@?@A@A@?BC@?@?@?@?@A@?BA@?@AB?@C@?@A@A@?@A@?FABE@C@?@C@A@C@A@A@?@?@AB?@?@@B?@?@A@?@@B?@?@?@@BA@A@A@A@?B?@?BA@A@?@?BA@A@AB?@?@?B?@@@@B?@@@?@?BA@A@A@?@?@?BA@?@?@?BA@?@A@?B?@A@A@A@AB?@A@A@?@?@A@AB?@A@?@A@?@?@?@@B@@@?@@@@@@@BA\",\"times\":[\"2024-08-25T10:21:24Z\",\"2024-08-25T10:21:28Z\",\"2024-08-25T10:21:30Z\",\"2024-08-25T10:21:31Z\",\"2024-08-25T10:21:32Z\",\"2024-08-25T10:21:34Z\",\"2024-08-25T10:21:35Z\",\"2024-08-25T10:21:36Z\",\"2024-08-25T10:21:37Z\",\"2024-08-25T10:21:38Z\",\"2024-08-25T10:21:40Z\",\"2024-08-25T10:21:41Z\",\"2024-08-25T10:21:43Z\",\"2024-08-25T10:21:44Z\",\"2024-08-25T10:21:45Z\",\"2024-08-25T10:21:46Z\",\"2024-08-25T10:21:50Z\",\"2024-08-25T10:21:52Z\",\"2024-08-25T10:21:53Z\",\"2024-08-25T10:21:54Z\",\"2024-08-25T10:21:55Z\",\"2024-08-25T10:21:56Z\",\"2024-08-25T10:21:58Z\",\"2024-08-25T10:22:00Z\",\"2024-08-25T10:22:01Z\",\"2024-08-25T10:22:02Z\",\"2024-08-25T10:22:03Z\",\"2024-08-25T10:22:04Z\",\"2024-08-25T10:22:05Z\",\"2024-08-25T10:22:06Z\",\"2024-08-25T10:22:07Z\",\"2024-08-25T10:22:08Z\",\"2024-08-25T10:22:09Z\",\"2024-08-25T10:22:10Z\",\"2024-08-25T10:22:11Z\",\"2024-08-25T10:22:12Z\",\"2024-08-25T10:22:13Z\",\"2024-08-25T10:22:14Z\",\"2024-08-25T10:22:15Z\",\"2024-08-25T10:22:17Z\",\"2024-08-25T10:22:18Z\",\"2024-08-25T10:22:19Z\",\"2024-08-25T10:22:20Z\",\"2024-08-25T10:22:22Z\",\"2024-08-25T10:22:23Z\",\"2024-08-25T10:22:24Z\",\"2024-08-25T10:22:25Z\",\"2024-08-25T10:22:26Z\",\"2024-08-25T10:22:27Z\",\"2024-08-25T10:22:28Z\",\"2024-08-25T10:22:29Z\",\"2024-08-25T10:22:30Z\",\"2024-08-25T10:22:31Z\",\"2024-08-25T10:22:32Z\",\"2024-08-25T10:22:33Z\",\"2024-08-25T10:22:35Z\",\"2024-08-25T10:22:36Z\",\"2024-08-25T10:22:37Z\",\"2024-08-25T10:22:38Z\",\"2024-08-25T10:22:39Z\",\"2024-08-25T10:22:40Z\",\"2024-08-25T10:22:41Z\",\"2024-08-25T10:22:42Z\",\"2024-08-25T10:22:43Z\",\"2024-08-25T10:22:44Z\",\"2024-08-25T10:22:45Z\",\"2024-08-25T10:22:47Z\",\"2024-08-25T10:22:48Z\",\"2024-08-25T10:22:50Z\",\"2024-08-25T10:22:51Z\",\"2024-08-25T10:22:52Z\",\"2024-08-25T10:22:53Z\",\"2024-08-25T10:22:54Z\",\"2024-08-25T10:22:56Z\",\"2024-08-25T10:22:58Z\",\"2024-08-25T10:22:59Z\",\"2024-08-25T10:23:00Z\",\"2024-08-25T10:23:01Z\",\"2024-08-25T10:23:02Z\",\"2024-08-25T10:23:03Z\",\"2024-08-25T10:23:04Z\",\"2024-08-25T10:23:05Z\",\"2024-08-25T10:23:06Z\",\"2024-08-25T10:23:07Z\",\"2024-08-25T10:23:08Z\",\"2024-08-25T10:23:09Z\",\"2024-08-25T10:23:10Z\",\"2024-08-25T10:23:11Z\",\"2024-08-25T10:23:12Z\",\"2024-08-25T10:23:14Z\",\"2024-08-25T10:23:15Z\",\"2024-08-25T10:23:16Z\",\"2024-08-25T10:23:17Z\",\"2024-08-25T10:23:18Z\",\"2024-08-25T10:23:19Z\",\"2024-08-25T10:23:20Z\",\"2024-08-25T10:23:21Z\",\"2024-08-25T10:23:23Z\",\"2024-08-25T10:23:24Z\",\"2024-08-25T10:23:25Z\",\"2024-08-25T10:23:27Z\",\"2024-08-25T10:23:38Z\",\"2024-08-25T10:23:39Z\",\"2024-08-25T10:23:40Z\",\"2024-08-25T10:23:41Z\",\"2024-08-25T10:23:42Z\",\"2024-08-25T10:23:43Z\",\"2024-08-25T10:23:45Z\",\"2024-08-25T10:23:46Z\",\"2024-08-25T10:23:47Z\",\"2024-08-25T10:23:49Z\",\"2024-08-25T10:23:50Z\",\"2024-08-25T10:23:51Z\",\"2024-08-25T10:23:52Z\",\"2024-08-25T10:23:53Z\",\"2024-08-25T10:23:54Z\",\"2024-08-25T10:23:56Z\",\"2024-08-25T10:23:57Z\",\"2024-08-25T10:23:59Z\",\"2024-08-25T10:24:00Z\",\"2024-08-25T10:24:01Z\",\"2024-08-25T10:24:02Z\",\"2024-08-25T10:24:03Z\",\"2024-08-25T10:24:04Z\",\"2024-08-25T10:24:05Z\",\"2024-08-25T10:24:06Z\",\"2024-08-25T10:24:07Z\",\"2024-08-25T10:24:08Z\",\"2024-08-25T10:24:09Z\",\"2024-08-25T10:24:10Z\",\"2024-08-25T10:24:11Z\",\"2024-08-25T10:24:12Z\",\"2024-08-25T10:24:13Z\",\"2024-08-25T10:24:14Z\",\"2024-08-25T10:24:15Z\",\"2024-08-25T10:24:16Z\",\"2024-08-25T10:24:21.832Z\",\"2024-08-25T10:24:23Z\",\"2024-08-25T10:24:24Z\",\"2024-08-25T10:24:25Z\",\"2024-08-25T10:24:26Z\",\"2024-08-25T10:24:27Z\",\"2024-08-25T10:24:28Z\",\"2024-08-25T10:24:29Z\",\"2024-08-25T10:24:30Z\",\"2024-08-25T10:24:31Z\",\"2024-08-25T10:24:32Z\",\"2024-08-25T10:24:33Z\",\"2024-08-25T10:24:34Z\",\"2024-08-25T10:24:35Z\",\"2024-08-25T10:24:36Z\",\"2024-08-25T10:24:37Z\",\"2024-08-25T10:24:38Z\",\"2024-08-25T10:24:39Z\",\"2024-08-25T10:24:40Z\",\"2024-08-25T10:24:41Z\",\"2024-08-25T10:24:42Z\",\"2024-08-25T10:24:43Z\",\"2024-08-25T10:24:44Z\",\"2024-08-25T10:24:45Z\",\"2024-08-25T10:24:46Z\",\"2024-08-25T10:24:47Z\",\"2024-08-25T10:24:48Z\",\"2024-08-25T10:24:49Z\",\"2024-08-25T10:24:50Z\",\"2024-08-25T10:24:51Z\",\"2024-08-25T10:24:52Z\",\"2024-08-25T10:24:53Z\",\"2024-08-25T10:24:54Z\",\"2024-08-25T10:24:55Z\",\"2024-08-25T10:24:56Z\",\"2024-08-25T10:24:57Z\",\"2024-08-25T10:24:58Z\",\"2024-08-25T10:24:59Z\",\"2024-08-25T10:25:00Z\",\"2024-08-25T10:25:01Z\",\"2024-08-25T10:25:02Z\",\"2024-08-25T10:25:03Z\",\"2024-08-25T10:25:04Z\",\"2024-08-25T10:25:05Z\",\"2024-08-25T10:25:06Z\",\"2024-08-25T10:25:07Z\",\"2024-08-25T10:25:08Z\",\"2024-08-25T10:25:09Z\",\"2024-08-25T10:25:10Z\",\"2024-08-25T10:25:11Z\",\"2024-08-25T10:25:13Z\",\"2024-08-25T10:25:14Z\",\"2024-08-25T10:25:15Z\",\"2024-08-25T10:25:16Z\",\"2024-08-25T10:25:17Z\",\"2024-08-25T10:25:18Z\",\"2024-08-25T10:25:19Z\",\"2024-08-25T10:25:20Z\",\"2024-08-25T10:25:21Z\",\"2024-08-25T10:25:22Z\",\"2024-08-25T10:25:23Z\",\"2024-08-25T10:25:24Z\",\"2024-08-25T10:25:25Z\",\"2024-08-25T10:25:26Z\",\"2024-08-25T10:25:27Z\",\"2024-08-25T10:25:28Z\",\"2024-08-25T10:25:29Z\",\"2024-08-25T10:25:30Z\",\"2024-08-25T10:25:31Z\",\"2024-08-25T10:25:32Z\",\"2024-08-25T10:25:33Z\",\"2024-08-25T10:25:34Z\",\"2024-08-25T10:25:35Z\",\"2024-08-25T10:25:36Z\",\"2024-08-25T10:25:37Z\",\"2024-08-25T10:25:38Z\",\"2024-08-25T10:25:39Z\",\"2024-08-25T10:25:40Z\",\"2024-08-25T10:25:41Z\",\"2024-08-25T10:25:42Z\",\"2024-08-25T10:25:43Z\",\"2024-08-25T10:25:44Z\",\"2024-08-25T10:25:45Z\",\"2024-08-25T10:25:46Z\",\"2024-08-25T10:25:47Z\",\"2024-08-25T10:25:48Z\",\"2024-08-25T10:25:49Z\",\"2024-08-25T10:25:50Z\",\"2024-08-25T10:25:52Z\"]}\n{\"name\":\"Griesbach Trails\",\"date\":\"2024-08-25T13:41:06Z\",\"line\":\"ytwfH}droAQKFWLWJUJUNSJ_@@[B]HWJ[JSL_@F]Fc@E]C[E]Ie@Bc@?[@]DYH]FYLSPKNOHUJ_@C]Cc@Aa@?c@B[LSX?P?NXJXJTFXPH@ZPBPFPCBZPFLPNHPKLORBPCNOPDPQNGLPC\\\\CZEXITOPEX?\\\\@\\\\HXLRCZA^AZEX@ZCZGXKXGXQHQJQNI`@MXMXMTIXGVQPCZMRSDOOSEYXUPSVKTIVMRKZOZMPQPSD\",\"times\":[\"2024-08-25T13:41:06Z\",\"2024-08-25T13:41:17Z\",\"2024-08-25T13:41:43Z\",\"2024-08-25T13:41:53Z\",\"2024-08-25T13:42:05Z\",\"2024-08-25T13:42:19Z\",\"2024-08-25T13:42:29Z\",\"2024-08-25T13:42:40Z\",\"2024-08-25T13:42:55Z\",\"2024-08-25T13:43:06Z\",\"2024-08-25T13:43:17Z\",\"2024-08-25T13:43:28Z\",\"2024-08-25T13:43:38Z\",\"2024-08-25T13:43:49Z\",\"2024-08-25T13:43:59Z\",\"2024-08-25T13:44:10Z\",\"2024-08-25T13:44:20Z\",\"2024-08-25T13:44:31Z\",\"2024-08-25T13:44:41Z\",\"2024-08-25T13:44:52Z\",\"2024-08-25T13:45:02Z\",\"2024-08-25T13:45:14Z\",\"2024-08-25T13:45:25Z\",\"2024-08-25T13:45:38Z\",\"2024-08-25T13:45:49Z\",\"2024-08-25T13:46:01Z\",\"2024-08-25T13:46:11Z\",\"2024-08-25T13:46:22Z\",\"2024-08-25T13:46:35Z\",\"2024-08-25T13:46:47Z\",\"2024-08-25T13:46:58Z\",\"2024-08-25T13:47:08Z\",\"2024-08-25T13:47:19Z\",\"2024-08-25T13:47:29Z\",\"2024-08-25T13:47:40Z\",\"2024-08-25T13:47:51Z\",\"2024-08-25T13:48:03Z\",\"2024-08-25T13:48:13Z\",\"2024-08-25T13:48:24Z\",\"2024-08-25T13:48:35Z\",\"2024-08-25T13:48:46Z\",\"2024-08-25T13:48:56Z\",\"2024-08-25T13:49:08Z\",\"2024-08-25T13:49:24Z\",\"2024-08-25T13:49:38Z\",\"2024-08-25T13:49:50Z\",\"2024-08-25T13:50:02Z\",\"2024-08-25T13:50:18Z\",\"2024-08-25T13:50:28Z\",\"2024-08-25T13:50:49Z\",\"2024-08-25T13:51:04Z\",\"2024-08-25T13:51:17Z\",\"2024-08-25T13:51:29Z\",\"2024-08-25T13:51:51Z\",\"2024-08-25T13:52:06Z\",\"2024-08-25T13:52:21Z\",\"2024-08-25T13:52:35Z\",\"2024-08-25T13:52:53Z\",\"2024-08-25T13:53:04Z\",\"2024-08-25T13:53:24Z\",\"2024-08-25T13:53:34Z\",\"2024-08-25T13:53:49Z\",\"2024-08-25T13:54:01Z\",\"2024-08-25T13:54:15Z\",\"2024-08-25T13:54:29Z\",\"2024-08-25T13:54:42Z\",\"2024-08-25T13:54:56Z\",\"2024-08-25T13:55:09Z\",\"2024-08-25T13:55:20Z\",\"2024-08-25T13:55:39Z\",\"2024-08-25T13:56:00Z\",\"2024-08-25T13:56:15Z\",\"2024-08-25T13:56:25Z\",\"2024-08-25T13:56:39Z\",\"2024-08-25T13:56:49Z\",\"2024-08-25T13:57:00Z\",\"2024-08-25T13:57:13Z\",\"2024-08-25T13:57:23Z\",\"2024-08-25T13:57:34Z\",\"2024-08-25T13:57:47Z\",\"2024-08-25T13:58:01Z\",\"2024-08-25T13:58:12Z\",\"2024-08-25T13:58:22Z\",\"2024-08-25T13:58:32Z\",\"2024-08-25T13:58:42Z\",\"2024-08-25T13:58:53Z\",\"2024-08-25T13:59:04Z\",\"2024-08-25T13:59:14Z\",\"2024-08-25T13:59:28Z\",\"2024-08-25T13:59:47Z\",\"2024-08-25T14:00:01Z\",\"2024-08-25T14:00:39Z\",\"2024-08-25T14:00:53Z\",\"2024-08-25T14:01:04Z\",\"2024-08-25T14:01:15Z\",\"2024-08-25T14:01:26Z\",\"2024-08-25T14:01:37Z\",\"2024-08-25T14:01:47Z\",\"2024-08-25T14:01:58Z\",\"2024-08-25T14:02:08Z\",\"2024-08-25T14:02:26Z\",\"2024-08-25T14:02:37Z\",\"2024-08-25T14:02:47Z\",\"2024-08-25T14:02:58Z\",\"2024-08-25T14:03:15Z\",\"2024-08-25T14:03:39Z\"]}\n"

func TestReset(t *testing.T) {
	t.Parallel()
	env := ptest.NewTestEnv(t)

	sampleSrv := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, _ *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		_, _ = w.Write([]byte(sampleTracksFile))
	}))
	env.Config.DemoUser.SampleTracksURL = sampleSrv.URL

	assertDemoState := func(t *testing.T) {
		repo := prepo.New(env.Env)

		gotUser, err := repo.Users.Get(ID)
		require.NoError(t, err)
		assert.Equal(t, ID, gotUser.ID)
		assert.Equal(t, Name, gotUser.Name)
		assert.Equal(t, Email, gotUser.Email)

		gotSettings, err := repo.Users.GetSettings(ID)
		require.NoError(t, err)
		assert.Equal(t, json.RawMessage(`{}`), gotSettings.Value)

		gotTracks, err := repo.Tracks.Search(prepo.TrackSearchOpts{Owner: ID})
		require.NoError(t, err)
		assert.Len(t, gotTracks.Tracks, 2)
	}

	t.Run("from scratch", func(t *testing.T) {
		env.Reset()
		require.NoError(t, Reset(context.Background(), env.Env))
		assertDemoState(t)
	})

	t.Run("after changes", func(t *testing.T) {
		env.Reset()
		repo := prepo.New(env.Env)

		// Reset for the first time

		require.NoError(t, Reset(context.Background(), env.Env))

		// Make changes

		_, err := repo.Users.UpdateSettings(prepo.UserSettings{UserID: ID, Value: json.RawMessage(`{"key": "value"}`)})
		require.NoError(t, err)
		gotSettings, err := repo.Users.GetSettings(ID)
		require.NoError(t, err)
		assert.Equal(t, json.RawMessage(`{"key": "value"}`), gotSettings.Value)

		gotTracks, err := repo.Tracks.Search(prepo.TrackSearchOpts{Owner: ID})
		require.NoError(t, err)
		require.NoError(t, repo.Tracks.Delete(gotTracks.Tracks[0].ID))

		_, err = repo.Tracks.Insert(prepo.Track{
			OwnerID: ID,
			Date:    ptime.DayStart(2020, 1, 1),
			Line:    geometry.NewLine([]geometry.Point{{X: 1, Y: 1}, {X: 2, Y: 2}}, nil),
		})
		require.NoError(t, err)

		// Reset again

		require.NoError(t, Reset(context.Background(), env.Env))

		// Check valid

		assertDemoState(t)
	})
}
