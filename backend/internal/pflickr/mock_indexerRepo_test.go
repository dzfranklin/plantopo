// Code generated by mockery v2.46.3. DO NOT EDIT.

package pflickr

import (
	time "time"

	prepo "github.com/dzfranklin/plantopo/backend/internal/prepo"
	mock "github.com/stretchr/testify/mock"
)

// MockindexerRepo is an autogenerated mock type for the indexerRepo type
type MockindexerRepo struct {
	mock.Mock
}

type MockindexerRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockindexerRepo) EXPECT() *MockindexerRepo_Expecter {
	return &MockindexerRepo_Expecter{mock: &_m.Mock}
}

// FlickrIndexRegions provides a mock function with given fields:
func (_m *MockindexerRepo) FlickrIndexRegions() ([]prepo.FlickrIndexRegion, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FlickrIndexRegions")
	}

	var r0 []prepo.FlickrIndexRegion
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]prepo.FlickrIndexRegion, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []prepo.FlickrIndexRegion); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]prepo.FlickrIndexRegion)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockindexerRepo_FlickrIndexRegions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FlickrIndexRegions'
type MockindexerRepo_FlickrIndexRegions_Call struct {
	*mock.Call
}

// FlickrIndexRegions is a helper method to define mock.On call
func (_e *MockindexerRepo_Expecter) FlickrIndexRegions() *MockindexerRepo_FlickrIndexRegions_Call {
	return &MockindexerRepo_FlickrIndexRegions_Call{Call: _e.mock.On("FlickrIndexRegions")}
}

func (_c *MockindexerRepo_FlickrIndexRegions_Call) Run(run func()) *MockindexerRepo_FlickrIndexRegions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockindexerRepo_FlickrIndexRegions_Call) Return(_a0 []prepo.FlickrIndexRegion, _a1 error) *MockindexerRepo_FlickrIndexRegions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockindexerRepo_FlickrIndexRegions_Call) RunAndReturn(run func() ([]prepo.FlickrIndexRegion, error)) *MockindexerRepo_FlickrIndexRegions_Call {
	_c.Call.Return(run)
	return _c
}

// GetFlickrIndexProgress provides a mock function with given fields: region
func (_m *MockindexerRepo) GetFlickrIndexProgress(region int) (time.Time, error) {
	ret := _m.Called(region)

	if len(ret) == 0 {
		panic("no return value specified for GetFlickrIndexProgress")
	}

	var r0 time.Time
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (time.Time, error)); ok {
		return rf(region)
	}
	if rf, ok := ret.Get(0).(func(int) time.Time); ok {
		r0 = rf(region)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(region)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockindexerRepo_GetFlickrIndexProgress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFlickrIndexProgress'
type MockindexerRepo_GetFlickrIndexProgress_Call struct {
	*mock.Call
}

// GetFlickrIndexProgress is a helper method to define mock.On call
//   - region int
func (_e *MockindexerRepo_Expecter) GetFlickrIndexProgress(region interface{}) *MockindexerRepo_GetFlickrIndexProgress_Call {
	return &MockindexerRepo_GetFlickrIndexProgress_Call{Call: _e.mock.On("GetFlickrIndexProgress", region)}
}

func (_c *MockindexerRepo_GetFlickrIndexProgress_Call) Run(run func(region int)) *MockindexerRepo_GetFlickrIndexProgress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockindexerRepo_GetFlickrIndexProgress_Call) Return(_a0 time.Time, _a1 error) *MockindexerRepo_GetFlickrIndexProgress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockindexerRepo_GetFlickrIndexProgress_Call) RunAndReturn(run func(int) (time.Time, error)) *MockindexerRepo_GetFlickrIndexProgress_Call {
	_c.Call.Return(run)
	return _c
}

// ImportIfNotPresent provides a mock function with given fields: photo
func (_m *MockindexerRepo) ImportIfNotPresent(photo prepo.Geophoto) error {
	ret := _m.Called(photo)

	if len(ret) == 0 {
		panic("no return value specified for ImportIfNotPresent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(prepo.Geophoto) error); ok {
		r0 = rf(photo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockindexerRepo_ImportIfNotPresent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImportIfNotPresent'
type MockindexerRepo_ImportIfNotPresent_Call struct {
	*mock.Call
}

// ImportIfNotPresent is a helper method to define mock.On call
//   - photo prepo.Geophoto
func (_e *MockindexerRepo_Expecter) ImportIfNotPresent(photo interface{}) *MockindexerRepo_ImportIfNotPresent_Call {
	return &MockindexerRepo_ImportIfNotPresent_Call{Call: _e.mock.On("ImportIfNotPresent", photo)}
}

func (_c *MockindexerRepo_ImportIfNotPresent_Call) Run(run func(photo prepo.Geophoto)) *MockindexerRepo_ImportIfNotPresent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(prepo.Geophoto))
	})
	return _c
}

func (_c *MockindexerRepo_ImportIfNotPresent_Call) Return(_a0 error) *MockindexerRepo_ImportIfNotPresent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockindexerRepo_ImportIfNotPresent_Call) RunAndReturn(run func(prepo.Geophoto) error) *MockindexerRepo_ImportIfNotPresent_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFlickrIndexProgress provides a mock function with given fields: region, latest
func (_m *MockindexerRepo) UpdateFlickrIndexProgress(region int, latest time.Time) error {
	ret := _m.Called(region, latest)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFlickrIndexProgress")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, time.Time) error); ok {
		r0 = rf(region, latest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockindexerRepo_UpdateFlickrIndexProgress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFlickrIndexProgress'
type MockindexerRepo_UpdateFlickrIndexProgress_Call struct {
	*mock.Call
}

// UpdateFlickrIndexProgress is a helper method to define mock.On call
//   - region int
//   - latest time.Time
func (_e *MockindexerRepo_Expecter) UpdateFlickrIndexProgress(region interface{}, latest interface{}) *MockindexerRepo_UpdateFlickrIndexProgress_Call {
	return &MockindexerRepo_UpdateFlickrIndexProgress_Call{Call: _e.mock.On("UpdateFlickrIndexProgress", region, latest)}
}

func (_c *MockindexerRepo_UpdateFlickrIndexProgress_Call) Run(run func(region int, latest time.Time)) *MockindexerRepo_UpdateFlickrIndexProgress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(time.Time))
	})
	return _c
}

func (_c *MockindexerRepo_UpdateFlickrIndexProgress_Call) Return(_a0 error) *MockindexerRepo_UpdateFlickrIndexProgress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockindexerRepo_UpdateFlickrIndexProgress_Call) RunAndReturn(run func(int, time.Time) error) *MockindexerRepo_UpdateFlickrIndexProgress_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockindexerRepo creates a new instance of MockindexerRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockindexerRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockindexerRepo {
	mock := &MockindexerRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
