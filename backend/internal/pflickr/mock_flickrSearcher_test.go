// Code generated by mockery v2.45.0. DO NOT EDIT.

package pflickr

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockflickrSearcher is an autogenerated mock type for the flickrSearcher type
type MockflickrSearcher struct {
	mock.Mock
}

type MockflickrSearcher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockflickrSearcher) EXPECT() *MockflickrSearcher_Expecter {
	return &MockflickrSearcher_Expecter{mock: &_m.Mock}
}

// searchForIndex provides a mock function with given fields: ctx, params
func (_m *MockflickrSearcher) searchForIndex(ctx context.Context, params searchParams) (searchPage, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for searchForIndex")
	}

	var r0 searchPage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, searchParams) (searchPage, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, searchParams) searchPage); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(searchPage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, searchParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockflickrSearcher_searchForIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'searchForIndex'
type MockflickrSearcher_searchForIndex_Call struct {
	*mock.Call
}

// searchForIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - params searchParams
func (_e *MockflickrSearcher_Expecter) searchForIndex(ctx interface{}, params interface{}) *MockflickrSearcher_searchForIndex_Call {
	return &MockflickrSearcher_searchForIndex_Call{Call: _e.mock.On("searchForIndex", ctx, params)}
}

func (_c *MockflickrSearcher_searchForIndex_Call) Run(run func(ctx context.Context, params searchParams)) *MockflickrSearcher_searchForIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(searchParams))
	})
	return _c
}

func (_c *MockflickrSearcher_searchForIndex_Call) Return(_a0 searchPage, _a1 error) *MockflickrSearcher_searchForIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockflickrSearcher_searchForIndex_Call) RunAndReturn(run func(context.Context, searchParams) (searchPage, error)) *MockflickrSearcher_searchForIndex_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockflickrSearcher creates a new instance of MockflickrSearcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockflickrSearcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockflickrSearcher {
	mock := &MockflickrSearcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
