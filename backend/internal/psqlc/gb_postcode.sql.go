// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: gb_postcode.sql

package psqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type BulkInsertGBPostcodePointsParams struct {
	Code  string
	Point Point
}

const deleteAllDBPostcodePoints = `-- name: DeleteAllDBPostcodePoints :exec
DELETE FROM gb_postcode_points
`

// DeleteAllDBPostcodePoints
//
//	DELETE FROM gb_postcode_points
func (q *Queries) DeleteAllDBPostcodePoints(ctx context.Context, db DBTX) error {
	_, err := db.Exec(ctx, deleteAllDBPostcodePoints)
	return err
}

const searchGBPostcode = `-- name: SearchGBPostcode :many
SELECT code, point
FROM gb_postcode_points
WHERE code_normalized LIKE $1||'%'
ORDER BY code
LIMIT 10
`

type SearchGBPostcodeRow struct {
	Code  string
	Point Point
}

// SearchGBPostcode
//
//	SELECT code, point
//	FROM gb_postcode_points
//	WHERE code_normalized LIKE $1||'%'
//	ORDER BY code
//	LIMIT 10
func (q *Queries) SearchGBPostcode(ctx context.Context, db DBTX, normalizedPrefix pgtype.Text) ([]SearchGBPostcodeRow, error) {
	rows, err := db.Query(ctx, searchGBPostcode, normalizedPrefix)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchGBPostcodeRow
	for rows.Next() {
		var i SearchGBPostcodeRow
		if err := rows.Scan(&i.Code, &i.Point); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchGBPostcodeBiased = `-- name: SearchGBPostcodeBiased :many
SELECT code, point
FROM gb_postcode_points
WHERE code_normalized LIKE $1||'%'
ORDER BY point <-> ST_SetSrid(ST_MakePoint($2, $3), 4326), code
LIMIT 10
`

type SearchGBPostcodeBiasedParams struct {
	NormalizedPrefix pgtype.Text
	BiasLng          float64
	BiasLat          float64
}

type SearchGBPostcodeBiasedRow struct {
	Code  string
	Point Point
}

// SearchGBPostcodeBiased
//
//	SELECT code, point
//	FROM gb_postcode_points
//	WHERE code_normalized LIKE $1||'%'
//	ORDER BY point <-> ST_SetSrid(ST_MakePoint($2, $3), 4326), code
//	LIMIT 10
func (q *Queries) SearchGBPostcodeBiased(ctx context.Context, db DBTX, arg SearchGBPostcodeBiasedParams) ([]SearchGBPostcodeBiasedRow, error) {
	rows, err := db.Query(ctx, searchGBPostcodeBiased, arg.NormalizedPrefix, arg.BiasLng, arg.BiasLat)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchGBPostcodeBiasedRow
	for rows.Next() {
		var i SearchGBPostcodeBiasedRow
		if err := rows.Scan(&i.Code, &i.Point); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectGBPostcodePoint = `-- name: SelectGBPostcodePoint :one
SELECT code, point FROM gb_postcode_points WHERE code = $1
`

type SelectGBPostcodePointRow struct {
	Code  string
	Point Point
}

// SelectGBPostcodePoint
//
//	SELECT code, point FROM gb_postcode_points WHERE code = $1
func (q *Queries) SelectGBPostcodePoint(ctx context.Context, db DBTX, code string) (SelectGBPostcodePointRow, error) {
	row := db.QueryRow(ctx, selectGBPostcodePoint, code)
	var i SelectGBPostcodePointRow
	err := row.Scan(&i.Code, &i.Point)
	return i, err
}
