// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: authorized_sms_senders.sql

package psqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkAuthorizedSMSSender = `-- name: CheckAuthorizedSMSSender :one
SELECT exists(
    SELECT 1 FROM authorized_sms_senders WHERE number_e164 = $1
)
`

// CheckAuthorizedSMSSender
//
//	SELECT exists(
//	    SELECT 1 FROM authorized_sms_senders WHERE number_e164 = $1
//	)
func (q *Queries) CheckAuthorizedSMSSender(ctx context.Context, db DBTX, number string) (bool, error) {
	row := db.QueryRow(ctx, checkAuthorizedSMSSender, number)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getAuthorizedSMSSender = `-- name: GetAuthorizedSMSSender :one
SELECT id, inserted_at, number_e164, comment FROM authorized_sms_senders WHERE id = $1
`

// GetAuthorizedSMSSender
//
//	SELECT id, inserted_at, number_e164, comment FROM authorized_sms_senders WHERE id = $1
func (q *Queries) GetAuthorizedSMSSender(ctx context.Context, db DBTX, id pgtype.UUID) (AuthorizedSmsSender, error) {
	row := db.QueryRow(ctx, getAuthorizedSMSSender, id)
	var i AuthorizedSmsSender
	err := row.Scan(
		&i.ID,
		&i.InsertedAt,
		&i.NumberE164,
		&i.Comment,
	)
	return i, err
}

const listAllAuthorizedSMSSenders = `-- name: ListAllAuthorizedSMSSenders :many
SELECT id, inserted_at, number_e164, comment FROM authorized_sms_senders
`

// ListAllAuthorizedSMSSenders
//
//	SELECT id, inserted_at, number_e164, comment FROM authorized_sms_senders
func (q *Queries) ListAllAuthorizedSMSSenders(ctx context.Context, db DBTX) ([]AuthorizedSmsSender, error) {
	rows, err := db.Query(ctx, listAllAuthorizedSMSSenders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AuthorizedSmsSender
	for rows.Next() {
		var i AuthorizedSmsSender
		if err := rows.Scan(
			&i.ID,
			&i.InsertedAt,
			&i.NumberE164,
			&i.Comment,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
