// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: sessions.sql

package psqlc

import (
	"context"
	"net/netip"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteSession = `-- name: DeleteSession :one
DELETE
FROM sessions
WHERE token = $1
RETURNING user_id
`

// DeleteSession
//
//	DELETE
//	FROM sessions
//	WHERE token = $1
//	RETURNING user_id
func (q *Queries) DeleteSession(ctx context.Context, db DBTX, token string) (pgtype.UUID, error) {
	row := db.QueryRow(ctx, deleteSession, token)
	var user_id pgtype.UUID
	err := row.Scan(&user_id)
	return user_id, err
}

const getSession = `-- name: GetSession :one
SELECT token, user_id, created_at, expiry_start, user_agent, ip_addr
FROM sessions
WHERE token = $1
`

// GetSession
//
//	SELECT token, user_id, created_at, expiry_start, user_agent, ip_addr
//	FROM sessions
//	WHERE token = $1
func (q *Queries) GetSession(ctx context.Context, db DBTX, token string) (Session, error) {
	row := db.QueryRow(ctx, getSession, token)
	var i Session
	err := row.Scan(
		&i.Token,
		&i.UserID,
		&i.CreatedAt,
		&i.ExpiryStart,
		&i.UserAgent,
		&i.IpAddr,
	)
	return i, err
}

const insertSession = `-- name: InsertSession :one
INSERT INTO sessions (user_id, user_agent, ip_addr)
VALUES ($1, $2, $3)
RETURNING token
`

type InsertSessionParams struct {
	UserID    pgtype.UUID
	UserAgent pgtype.Text
	IpAddr    *netip.Addr
}

// InsertSession
//
//	INSERT INTO sessions (user_id, user_agent, ip_addr)
//	VALUES ($1, $2, $3)
//	RETURNING token
func (q *Queries) InsertSession(ctx context.Context, db DBTX, arg InsertSessionParams) (string, error) {
	row := db.QueryRow(ctx, insertSession, arg.UserID, arg.UserAgent, arg.IpAddr)
	var token string
	err := row.Scan(&token)
	return token, err
}

const listSessionsByUser = `-- name: ListSessionsByUser :many
SELECT token, user_id, created_at, expiry_start, user_agent, ip_addr
FROM sessions
WHERE user_id = $1
`

// ListSessionsByUser
//
//	SELECT token, user_id, created_at, expiry_start, user_agent, ip_addr
//	FROM sessions
//	WHERE user_id = $1
func (q *Queries) ListSessionsByUser(ctx context.Context, db DBTX, userID pgtype.UUID) ([]Session, error) {
	rows, err := db.Query(ctx, listSessionsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Session
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.Token,
			&i.UserID,
			&i.CreatedAt,
			&i.ExpiryStart,
			&i.UserAgent,
			&i.IpAddr,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const refreshSessionExpiry = `-- name: RefreshSessionExpiry :exec
UPDATE sessions
SET expiry_start = now()
WHERE token = $1
`

// RefreshSessionExpiry
//
//	UPDATE sessions
//	SET expiry_start = now()
//	WHERE token = $1
func (q *Queries) RefreshSessionExpiry(ctx context.Context, db DBTX, token string) error {
	_, err := db.Exec(ctx, refreshSessionExpiry, token)
	return err
}
