// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: flags.sql

package psqlc

import (
	"context"
)

const deleteBoolFlag = `-- name: DeleteBoolFlag :exec
DELETE FROM boolean_flags
WHERE key = $1
`

// DeleteBoolFlag
//
//	DELETE FROM boolean_flags
//	WHERE key = $1
func (q *Queries) DeleteBoolFlag(ctx context.Context, db DBTX, key string) error {
	_, err := db.Exec(ctx, deleteBoolFlag, key)
	return err
}

const selectAllBoolFlags = `-- name: SelectAllBoolFlags :many
SELECT key, value
FROM boolean_flags
`

// SelectAllBoolFlags
//
//	SELECT key, value
//	FROM boolean_flags
func (q *Queries) SelectAllBoolFlags(ctx context.Context, db DBTX) ([]BooleanFlag, error) {
	rows, err := db.Query(ctx, selectAllBoolFlags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BooleanFlag
	for rows.Next() {
		var i BooleanFlag
		if err := rows.Scan(&i.Key, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertBoolFlag = `-- name: UpsertBoolFlag :exec
INSERT INTO boolean_flags (key, value)
VALUES ($1, $2)
ON CONFLICT (key) DO UPDATE SET value = $2
`

// UpsertBoolFlag
//
//	INSERT INTO boolean_flags (key, value)
//	VALUES ($1, $2)
//	ON CONFLICT (key) DO UPDATE SET value = $2
func (q *Queries) UpsertBoolFlag(ctx context.Context, db DBTX, key string, value bool) error {
	_, err := db.Exec(ctx, upsertBoolFlag, key, value)
	return err
}
