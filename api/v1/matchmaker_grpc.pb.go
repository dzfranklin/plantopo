// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: api/v1/matchmaker.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Matchmaker_SetupConnection_FullMethodName   = "/Matchmaker/SetupConnection"
	Matchmaker_RegisterBackend_FullMethodName   = "/Matchmaker/RegisterBackend"
	Matchmaker_UnregisterBackend_FullMethodName = "/Matchmaker/UnregisterBackend"
	Matchmaker_RegisterClose_FullMethodName     = "/Matchmaker/RegisterClose"
	Matchmaker_Stats_FullMethodName             = "/Matchmaker/Stats"
	Matchmaker_DebugState_FullMethodName        = "/Matchmaker/DebugState"
)

// MatchmakerClient is the client API for Matchmaker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MatchmakerClient interface {
	// SetupConnection is called by the frontend to get a backend to connect to.
	SetupConnection(ctx context.Context, in *MatchmakerSetupConnectionRequest, opts ...grpc.CallOption) (*MatchmakerSetupConnectionResponse, error)
	// RegisterBackend is called by the backend to register itself with the
	// matchmaker
	RegisterBackend(ctx context.Context, in *MatchmakerRegisterBackendRequest, opts ...grpc.CallOption) (*MatchmakerRegisterBackendResponse, error)
	// UnregisterBackend is called by the backend to unregister itself with the
	// matchmaker
	UnregisterBackend(ctx context.Context, in *MatchmakerUnregisterBackendRequest, opts ...grpc.CallOption) (*MatchmakerUnregisterBackendResponse, error)
	// RegisterClose is called by the backend to inform the matchmaker the
	// backend has closed a map.
	RegisterClose(ctx context.Context, in *MatchmakerRegisterCloseRequest, opts ...grpc.CallOption) (*MatchmakerRegisterCloseResponse, error)
	Stats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*structpb.Struct, error)
	DebugState(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*structpb.Struct, error)
}

type matchmakerClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchmakerClient(cc grpc.ClientConnInterface) MatchmakerClient {
	return &matchmakerClient{cc}
}

func (c *matchmakerClient) SetupConnection(ctx context.Context, in *MatchmakerSetupConnectionRequest, opts ...grpc.CallOption) (*MatchmakerSetupConnectionResponse, error) {
	out := new(MatchmakerSetupConnectionResponse)
	err := c.cc.Invoke(ctx, Matchmaker_SetupConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakerClient) RegisterBackend(ctx context.Context, in *MatchmakerRegisterBackendRequest, opts ...grpc.CallOption) (*MatchmakerRegisterBackendResponse, error) {
	out := new(MatchmakerRegisterBackendResponse)
	err := c.cc.Invoke(ctx, Matchmaker_RegisterBackend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakerClient) UnregisterBackend(ctx context.Context, in *MatchmakerUnregisterBackendRequest, opts ...grpc.CallOption) (*MatchmakerUnregisterBackendResponse, error) {
	out := new(MatchmakerUnregisterBackendResponse)
	err := c.cc.Invoke(ctx, Matchmaker_UnregisterBackend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakerClient) RegisterClose(ctx context.Context, in *MatchmakerRegisterCloseRequest, opts ...grpc.CallOption) (*MatchmakerRegisterCloseResponse, error) {
	out := new(MatchmakerRegisterCloseResponse)
	err := c.cc.Invoke(ctx, Matchmaker_RegisterClose_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakerClient) Stats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*structpb.Struct, error) {
	out := new(structpb.Struct)
	err := c.cc.Invoke(ctx, Matchmaker_Stats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakerClient) DebugState(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*structpb.Struct, error) {
	out := new(structpb.Struct)
	err := c.cc.Invoke(ctx, Matchmaker_DebugState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatchmakerServer is the server API for Matchmaker service.
// All implementations must embed UnimplementedMatchmakerServer
// for forward compatibility
type MatchmakerServer interface {
	// SetupConnection is called by the frontend to get a backend to connect to.
	SetupConnection(context.Context, *MatchmakerSetupConnectionRequest) (*MatchmakerSetupConnectionResponse, error)
	// RegisterBackend is called by the backend to register itself with the
	// matchmaker
	RegisterBackend(context.Context, *MatchmakerRegisterBackendRequest) (*MatchmakerRegisterBackendResponse, error)
	// UnregisterBackend is called by the backend to unregister itself with the
	// matchmaker
	UnregisterBackend(context.Context, *MatchmakerUnregisterBackendRequest) (*MatchmakerUnregisterBackendResponse, error)
	// RegisterClose is called by the backend to inform the matchmaker the
	// backend has closed a map.
	RegisterClose(context.Context, *MatchmakerRegisterCloseRequest) (*MatchmakerRegisterCloseResponse, error)
	Stats(context.Context, *emptypb.Empty) (*structpb.Struct, error)
	DebugState(context.Context, *emptypb.Empty) (*structpb.Struct, error)
	mustEmbedUnimplementedMatchmakerServer()
}

// UnimplementedMatchmakerServer must be embedded to have forward compatible implementations.
type UnimplementedMatchmakerServer struct {
}

func (UnimplementedMatchmakerServer) SetupConnection(context.Context, *MatchmakerSetupConnectionRequest) (*MatchmakerSetupConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupConnection not implemented")
}
func (UnimplementedMatchmakerServer) RegisterBackend(context.Context, *MatchmakerRegisterBackendRequest) (*MatchmakerRegisterBackendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterBackend not implemented")
}
func (UnimplementedMatchmakerServer) UnregisterBackend(context.Context, *MatchmakerUnregisterBackendRequest) (*MatchmakerUnregisterBackendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterBackend not implemented")
}
func (UnimplementedMatchmakerServer) RegisterClose(context.Context, *MatchmakerRegisterCloseRequest) (*MatchmakerRegisterCloseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterClose not implemented")
}
func (UnimplementedMatchmakerServer) Stats(context.Context, *emptypb.Empty) (*structpb.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stats not implemented")
}
func (UnimplementedMatchmakerServer) DebugState(context.Context, *emptypb.Empty) (*structpb.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DebugState not implemented")
}
func (UnimplementedMatchmakerServer) mustEmbedUnimplementedMatchmakerServer() {}

// UnsafeMatchmakerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchmakerServer will
// result in compilation errors.
type UnsafeMatchmakerServer interface {
	mustEmbedUnimplementedMatchmakerServer()
}

func RegisterMatchmakerServer(s grpc.ServiceRegistrar, srv MatchmakerServer) {
	s.RegisterService(&Matchmaker_ServiceDesc, srv)
}

func _Matchmaker_SetupConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchmakerSetupConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakerServer).SetupConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Matchmaker_SetupConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakerServer).SetupConnection(ctx, req.(*MatchmakerSetupConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Matchmaker_RegisterBackend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchmakerRegisterBackendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakerServer).RegisterBackend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Matchmaker_RegisterBackend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakerServer).RegisterBackend(ctx, req.(*MatchmakerRegisterBackendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Matchmaker_UnregisterBackend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchmakerUnregisterBackendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakerServer).UnregisterBackend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Matchmaker_UnregisterBackend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakerServer).UnregisterBackend(ctx, req.(*MatchmakerUnregisterBackendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Matchmaker_RegisterClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchmakerRegisterCloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakerServer).RegisterClose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Matchmaker_RegisterClose_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakerServer).RegisterClose(ctx, req.(*MatchmakerRegisterCloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Matchmaker_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakerServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Matchmaker_Stats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakerServer).Stats(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Matchmaker_DebugState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakerServer).DebugState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Matchmaker_DebugState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakerServer).DebugState(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Matchmaker_ServiceDesc is the grpc.ServiceDesc for Matchmaker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Matchmaker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Matchmaker",
	HandlerType: (*MatchmakerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetupConnection",
			Handler:    _Matchmaker_SetupConnection_Handler,
		},
		{
			MethodName: "RegisterBackend",
			Handler:    _Matchmaker_RegisterBackend_Handler,
		},
		{
			MethodName: "UnregisterBackend",
			Handler:    _Matchmaker_UnregisterBackend_Handler,
		},
		{
			MethodName: "RegisterClose",
			Handler:    _Matchmaker_RegisterClose_Handler,
		},
		{
			MethodName: "Stats",
			Handler:    _Matchmaker_Stats_Handler,
		},
		{
			MethodName: "DebugState",
			Handler:    _Matchmaker_DebugState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/matchmaker.proto",
}
