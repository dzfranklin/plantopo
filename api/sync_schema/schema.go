// Code generated by sync_schema/gen. DO NOT EDIT.

package sync_schema

import (
	"bytes"
	"encoding/json"
	"fmt"
	"strings"
)

type State uint8

const (
	Unspecified State = 0
	Unset       State = 1
	Set         State = 2
)

type Feature struct {
	Id                    string
	ParentState           State
	Parent                string
	IdxState              State
	Idx                   string
	GeometryState         State
	Geometry              Geometry
	NameState             State
	Name                  string
	ColorState            State
	Color                 string
	HiddenState           State
	Hidden                bool
	ImportedFromFileState State
	ImportedFromFile      string
}

func (t *Feature) Merge(other Feature) {
	if t.Id != other.Id {
		panic("cannot merge Features: id differs")
	}
	if other.ParentState != Unspecified {
		t.ParentState = other.ParentState
		t.Parent = other.Parent
	}
	if other.IdxState != Unspecified {
		t.IdxState = other.IdxState
		t.Idx = other.Idx
	}
	if other.GeometryState != Unspecified {
		t.GeometryState = other.GeometryState
		t.Geometry = other.Geometry
	}
	if other.NameState != Unspecified {
		t.NameState = other.NameState
		t.Name = other.Name
	}
	if other.ColorState != Unspecified {
		t.ColorState = other.ColorState
		t.Color = other.Color
	}
	if other.HiddenState != Unspecified {
		t.HiddenState = other.HiddenState
		t.Hidden = other.Hidden
	}
	if other.ImportedFromFileState != Unspecified {
		t.ImportedFromFileState = other.ImportedFromFileState
		t.ImportedFromFile = other.ImportedFromFile
	}
}

func (t Feature) ShallowClone() Feature {
	out := Feature{}
	out.Id = t.Id
	out.ParentState = t.ParentState
	out.Parent = t.Parent
	out.IdxState = t.IdxState
	out.Idx = t.Idx
	out.GeometryState = t.GeometryState
	out.Geometry = t.Geometry
	out.NameState = t.NameState
	out.Name = t.Name
	out.ColorState = t.ColorState
	out.Color = t.Color
	out.HiddenState = t.HiddenState
	out.Hidden = t.Hidden
	out.ImportedFromFileState = t.ImportedFromFileState
	out.ImportedFromFile = t.ImportedFromFile
	return out
}

func (t *Feature) UnmarshalJSON(data []byte) error {
	dec := json.NewDecoder(bytes.NewReader(data))
	tok, err := dec.Token()
	if err != nil {
		return err
	}
	if tok != json.Delim('{') {
		return fmt.Errorf("expected '{'")
	}
	for {
		tok, err := dec.Token()
		if err != nil {
			return err
		}
		if tok == json.Delim('}') {
			break
		}
		if key, ok := tok.(string); ok {
			switch key {
			case "id":
				if err := dec.Decode(&t.Id); err != nil {
					return err
				}
			case "parent":
				var raw json.RawMessage
				if err := dec.Decode(&raw); err != nil {
					return err
				}
				if bytes.Equal(raw, []byte("null")) {
					t.ParentState = Unset
				} else {
					t.ParentState = Set
					if err := json.Unmarshal(raw, &t.Parent); err != nil {
						return err
					}
				}
			case "idx":
				var raw json.RawMessage
				if err := dec.Decode(&raw); err != nil {
					return err
				}
				if bytes.Equal(raw, []byte("null")) {
					t.IdxState = Unset
				} else {
					t.IdxState = Set
					if err := json.Unmarshal(raw, &t.Idx); err != nil {
						return err
					}
				}
			case "geometry":
				var raw json.RawMessage
				if err := dec.Decode(&raw); err != nil {
					return err
				}
				if bytes.Equal(raw, []byte("null")) {
					t.GeometryState = Unset
				} else {
					t.GeometryState = Set
					if err := json.Unmarshal(raw, &t.Geometry); err != nil {
						return err
					}
				}
			case "name":
				var raw json.RawMessage
				if err := dec.Decode(&raw); err != nil {
					return err
				}
				if bytes.Equal(raw, []byte("null")) {
					t.NameState = Unset
				} else {
					t.NameState = Set
					if err := json.Unmarshal(raw, &t.Name); err != nil {
						return err
					}
				}
			case "color":
				var raw json.RawMessage
				if err := dec.Decode(&raw); err != nil {
					return err
				}
				if bytes.Equal(raw, []byte("null")) {
					t.ColorState = Unset
				} else {
					t.ColorState = Set
					if err := json.Unmarshal(raw, &t.Color); err != nil {
						return err
					}
				}
			case "hidden":
				var raw json.RawMessage
				if err := dec.Decode(&raw); err != nil {
					return err
				}
				if bytes.Equal(raw, []byte("null")) {
					t.HiddenState = Unset
				} else {
					t.HiddenState = Set
					if err := json.Unmarshal(raw, &t.Hidden); err != nil {
						return err
					}
				}
			case "importedFromFile":
				var raw json.RawMessage
				if err := dec.Decode(&raw); err != nil {
					return err
				}
				if bytes.Equal(raw, []byte("null")) {
					t.ImportedFromFileState = Unset
				} else {
					t.ImportedFromFileState = Set
					if err := json.Unmarshal(raw, &t.ImportedFromFile); err != nil {
						return err
					}
				}
			}
		}
	}
	return t.validate()
}
func (t Feature) MarshalJSON() ([]byte, error) {
	var sb strings.Builder
	sb.WriteString("{")

	sb.WriteString("\"id\":")
	enc, err := json.Marshal(t.Id)
	if err != nil {
		return nil, err
	}
	sb.Write(enc)

	switch t.ParentState {
	case Unset:
		sb.WriteString(",\"parent\":null")
	case Set:
		value, err := json.Marshal(t.Parent)
		if err != nil {
			return nil, err
		}
		sb.WriteString(",\"parent\":")
		sb.Write(value)
	case Unspecified:
	}

	switch t.IdxState {
	case Unset:
		sb.WriteString(",\"idx\":null")
	case Set:
		value, err := json.Marshal(t.Idx)
		if err != nil {
			return nil, err
		}
		sb.WriteString(",\"idx\":")
		sb.Write(value)
	case Unspecified:
	}

	switch t.GeometryState {
	case Unset:
		sb.WriteString(",\"geometry\":null")
	case Set:
		value, err := json.Marshal(t.Geometry)
		if err != nil {
			return nil, err
		}
		sb.WriteString(",\"geometry\":")
		sb.Write(value)
	case Unspecified:
	}

	switch t.NameState {
	case Unset:
		sb.WriteString(",\"name\":null")
	case Set:
		value, err := json.Marshal(t.Name)
		if err != nil {
			return nil, err
		}
		sb.WriteString(",\"name\":")
		sb.Write(value)
	case Unspecified:
	}

	switch t.ColorState {
	case Unset:
		sb.WriteString(",\"color\":null")
	case Set:
		value, err := json.Marshal(t.Color)
		if err != nil {
			return nil, err
		}
		sb.WriteString(",\"color\":")
		sb.Write(value)
	case Unspecified:
	}

	switch t.HiddenState {
	case Unset:
		sb.WriteString(",\"hidden\":null")
	case Set:
		value, err := json.Marshal(t.Hidden)
		if err != nil {
			return nil, err
		}
		sb.WriteString(",\"hidden\":")
		sb.Write(value)
	case Unspecified:
	}

	switch t.ImportedFromFileState {
	case Unset:
		sb.WriteString(",\"importedFromFile\":null")
	case Set:
		value, err := json.Marshal(t.ImportedFromFile)
		if err != nil {
			return nil, err
		}
		sb.WriteString(",\"importedFromFile\":")
		sb.Write(value)
	case Unspecified:
	}

	sb.WriteString("}")
	return []byte(sb.String()), nil
}

type Layer struct {
	Id           string
	IdxState     State
	Idx          string
	OpacityState State
	Opacity      float64
}

func (t *Layer) Merge(other Layer) {
	if t.Id != other.Id {
		panic("cannot merge Layers: id differs")
	}
	if other.IdxState != Unspecified {
		t.IdxState = other.IdxState
		t.Idx = other.Idx
	}
	if other.OpacityState != Unspecified {
		t.OpacityState = other.OpacityState
		t.Opacity = other.Opacity
	}
}

func (t Layer) ShallowClone() Layer {
	out := Layer{}
	out.Id = t.Id
	out.IdxState = t.IdxState
	out.Idx = t.Idx
	out.OpacityState = t.OpacityState
	out.Opacity = t.Opacity
	return out
}

func (t *Layer) UnmarshalJSON(data []byte) error {
	dec := json.NewDecoder(bytes.NewReader(data))
	tok, err := dec.Token()
	if err != nil {
		return err
	}
	if tok != json.Delim('{') {
		return fmt.Errorf("expected '{'")
	}
	for {
		tok, err := dec.Token()
		if err != nil {
			return err
		}
		if tok == json.Delim('}') {
			break
		}
		if key, ok := tok.(string); ok {
			switch key {
			case "id":
				if err := dec.Decode(&t.Id); err != nil {
					return err
				}
			case "idx":
				var raw json.RawMessage
				if err := dec.Decode(&raw); err != nil {
					return err
				}
				if bytes.Equal(raw, []byte("null")) {
					t.IdxState = Unset
				} else {
					t.IdxState = Set
					if err := json.Unmarshal(raw, &t.Idx); err != nil {
						return err
					}
				}
			case "opacity":
				var raw json.RawMessage
				if err := dec.Decode(&raw); err != nil {
					return err
				}
				if bytes.Equal(raw, []byte("null")) {
					t.OpacityState = Unset
				} else {
					t.OpacityState = Set
					if err := json.Unmarshal(raw, &t.Opacity); err != nil {
						return err
					}
				}
			}
		}
	}
	return t.validate()
}
func (t Layer) MarshalJSON() ([]byte, error) {
	var sb strings.Builder
	sb.WriteString("{")

	sb.WriteString("\"id\":")
	enc, err := json.Marshal(t.Id)
	if err != nil {
		return nil, err
	}
	sb.Write(enc)

	switch t.IdxState {
	case Unset:
		sb.WriteString(",\"idx\":null")
	case Set:
		value, err := json.Marshal(t.Idx)
		if err != nil {
			return nil, err
		}
		sb.WriteString(",\"idx\":")
		sb.Write(value)
	case Unspecified:
	}

	switch t.OpacityState {
	case Unset:
		sb.WriteString(",\"opacity\":null")
	case Set:
		value, err := json.Marshal(t.Opacity)
		if err != nil {
			return nil, err
		}
		sb.WriteString(",\"opacity\":")
		sb.Write(value)
	case Unspecified:
	}

	sb.WriteString("}")
	return []byte(sb.String()), nil
}
