// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0

package queries

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type PtGeneralAccessLevel string

const (
	PtGeneralAccessLevelRestricted PtGeneralAccessLevel = "restricted"
	PtGeneralAccessLevelPublic     PtGeneralAccessLevel = "public"
)

func (e *PtGeneralAccessLevel) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PtGeneralAccessLevel(s)
	case string:
		*e = PtGeneralAccessLevel(s)
	default:
		return fmt.Errorf("unsupported scan type for PtGeneralAccessLevel: %T", src)
	}
	return nil
}

type NullPtGeneralAccessLevel struct {
	PtGeneralAccessLevel PtGeneralAccessLevel
	Valid                bool // Valid is true if PtGeneralAccessLevel is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPtGeneralAccessLevel) Scan(value interface{}) error {
	if value == nil {
		ns.PtGeneralAccessLevel, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PtGeneralAccessLevel.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPtGeneralAccessLevel) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PtGeneralAccessLevel), nil
}

type PtGeneralAccessRole string

const (
	PtGeneralAccessRoleViewer PtGeneralAccessRole = "viewer"
	PtGeneralAccessRoleEditor PtGeneralAccessRole = "editor"
)

func (e *PtGeneralAccessRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PtGeneralAccessRole(s)
	case string:
		*e = PtGeneralAccessRole(s)
	default:
		return fmt.Errorf("unsupported scan type for PtGeneralAccessRole: %T", src)
	}
	return nil
}

type NullPtGeneralAccessRole struct {
	PtGeneralAccessRole PtGeneralAccessRole
	Valid               bool // Valid is true if PtGeneralAccessRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPtGeneralAccessRole) Scan(value interface{}) error {
	if value == nil {
		ns.PtGeneralAccessRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PtGeneralAccessRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPtGeneralAccessRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PtGeneralAccessRole), nil
}

type PtMyRole string

const (
	PtMyRoleOwner  PtMyRole = "owner"
	PtMyRoleEditor PtMyRole = "editor"
	PtMyRoleViewer PtMyRole = "viewer"
)

func (e *PtMyRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PtMyRole(s)
	case string:
		*e = PtMyRole(s)
	default:
		return fmt.Errorf("unsupported scan type for PtMyRole: %T", src)
	}
	return nil
}

type NullPtMyRole struct {
	PtMyRole PtMyRole
	Valid    bool // Valid is true if PtMyRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPtMyRole) Scan(value interface{}) error {
	if value == nil {
		ns.PtMyRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PtMyRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPtMyRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PtMyRole), nil
}

type PtAccessRequest struct {
	InternalID            int64
	ExternalID            string
	CreatedAt             pgtype.Timestamptz
	ApprovedAt            pgtype.Timestamptz
	ImplicitlyObsoletedAt pgtype.Timestamptz
	RejectedAt            pgtype.Timestamptz
	RequestingUserID      pgtype.UUID
	RecipientUserID       pgtype.UUID
	MapInternalID         int64
	RequestedRole         PtMyRole
	Message               string
}

type PtDoclog struct {
	MapID           string
	GenerationStart int64
	GenerationEnd   int64
	Changeset       []byte
	CreatedAt       pgtype.Timestamptz
}

type PtDoclogHead struct {
	MapID           string
	GenerationStart int64
}

type PtEmailConfirmationToken struct {
	ID       int32
	UserID   pgtype.UUID
	Token    string
	IssuedAt pgtype.Timestamptz
	UsedAt   pgtype.Timestamptz
}

type PtMailgunLog struct {
	ID         int64
	CreatedAt  pgtype.Timestamptz
	To         string
	Subject    string
	TextBody   string
	SendStatus string
	SendID     string
}

type PtMap struct {
	InternalID         int64
	ExternalID         string
	Name               string
	GeneralAccessLevel PtGeneralAccessLevel
	GeneralAccessRole  PtGeneralAccessRole
	CreatedAt          pgtype.Timestamptz
	DeletedAt          pgtype.Timestamptz
}

type PtMapImport struct {
	InternalID     int64
	ExternalID     string
	MapID          string
	Format         string
	CreatedAt      pgtype.Timestamptz
	StartedAt      pgtype.Timestamptz
	CompletedAt    pgtype.Timestamptz
	FailedAt       pgtype.Timestamptz
	FailureMessage pgtype.Text
	Filename       pgtype.Text
}

type PtMapRole struct {
	ID        int64
	MapID     int64
	UserID    pgtype.UUID
	MyRole    PtMyRole
	CreatedAt pgtype.Timestamptz
}

type PtMapSnapshot struct {
	ID        int64
	MapID     int64
	Value     []byte
	CreatedAt pgtype.Timestamptz
}

type PtPasswordResetToken struct {
	ID       int32
	UserID   pgtype.UUID
	Token    string
	IssuedAt pgtype.Timestamptz
	UsedAt   pgtype.Timestamptz
}

type PtPendingMapInvite struct {
	ID        int64
	MapID     int64
	Email     string
	MyRole    PtMyRole
	CreatedAt pgtype.Timestamptz
}

type PtUser struct {
	ID             pgtype.UUID
	Email          string
	FullName       string
	HashedPassword []byte
	CreatedAt      pgtype.Timestamptz
	ConfirmedAt    pgtype.Timestamptz
}
